<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github常用命令与网站部署</title>
      <link href="/2020/03/02/gong-ju/github-chang-yong-ming-ling-yu-bao-ta-wang-zhan-bu-shu/"/>
      <url>/2020/03/02/gong-ju/github-chang-yong-ming-ling-yu-bao-ta-wang-zhan-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Github常用命令与网站部署"><a href="#Github常用命令与网站部署" class="headerlink" title="Github常用命令与网站部署"></a>Github常用命令与网站部署</h1><h2 id="Github常用命令"><a href="#Github常用命令" class="headerlink" title="Github常用命令"></a>Github常用命令</h2><p><strong>git init 新建一个空的仓库</strong><br><strong>git status 查看状态</strong><br><strong>git add . 添加文件</strong><br><strong>git commit -m ‘注释’ 提交添加的文件并备注说明</strong><br><strong>git remote add origin #连接你的Github仓库 连接远程仓库</strong><br><strong>git push -u origin master 将本地仓库文件推送到远程仓库</strong><br><strong>git log 查看变更日志</strong><br><strong>git reset –hard 版本号前六位 回归到指定版本</strong><br><strong>git branch 查看分支</strong><br><strong>git branch newname 创建一个叫newname的分支</strong><br><strong>git checkout newname 切换到叫newname的分支上</strong><br><strong>git merge newname 把newname分支合并到当前分支上</strong><br><strong>git pull origin master 将master分支上的内容拉到本地上</strong></p><h2 id="使用Git向Github-提交代码"><a href="#使用Git向Github-提交代码" class="headerlink" title="使用Git向Github 提交代码"></a>使用Git向Github 提交代码</h2><blockquote><p><strong>第一次使用</strong></p></blockquote><p><strong>第一步：</strong>在Github创建一个仓库</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/wjiUV7frSpBd5cH.png" alt="创建仓库"></p><p><strong>第二步：</strong>进入本地项目文件夹。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化代码仓库，会在文件夹下生成一个.git文件。</p><p><strong>第三步：</strong>添加文件到版本库（只是先放在了缓存区里缓冲区）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第四步：</strong>把添加的文件提交到版本库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"first commit"</span> <span class="token comment" spellcheck="true"># 可以自定义提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第五步：</strong>将本地库与远程库关联</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin <span class="token comment" spellcheck="true">#后面跟上你的仓库地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第六步：</strong>推送代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master // 推送代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>以后使用</strong></p></blockquote><p><strong>进入要提交代码的文件</strong>执行一下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master  <span class="token comment" spellcheck="true">#拉取远程仓库到本地</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'描述内容'</span><span class="token function">git</span> push origin master  <span class="token comment" spellcheck="true"># 推送到GitHub仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hexo博客创建分支管理"><a href="#Hexo博客创建分支管理" class="headerlink" title="Hexo博客创建分支管理"></a>Hexo博客创建分支管理</h2><p>我们的Hexo博客部署在Github通过hexo clean | hexo g | hexo d 这一系列流程将我们的静态博客提交到Github仓库中。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/it1WmZXD5lofQs8.png" alt="我的博客仓库"></p><p>这是我的Hexo博客，可以看到我们提交的是经过hexo生成的代码文件。</p><p>这和我们的博客源码文件不一样，如果哪天你更换电脑，或者误删了博客文件，会很不好管理，所以我们通过创建分支（branch）来管理我们的博客源码。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token comment" spellcheck="true">###进入你的hexo博客文件</span><span class="token function">git</span> init  <span class="token comment" spellcheck="true">#初始化过了后就不必初始化</span><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#将必要的文件依次添加</span><span class="token function">git</span> commit -m <span class="token string">"提交hexo 配置文件"</span><span class="token function">git</span> branch hexo  <span class="token comment" spellcheck="true">#新建hexo分支</span><span class="token function">git</span> checkout hexo  <span class="token comment" spellcheck="true">#切换到hexo分支上 git switch hexo也可以</span><span class="token function">git</span> remote add origin <span class="token comment" spellcheck="true">#本地与远程对接</span><span class="token function">git</span> push origin hexo  <span class="token comment" spellcheck="true">#push到github项目文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/E8v9nY4xIdMi7HV.png" alt="hexo分支"></p><p>这样就保存了我们的源代码的文件了。</p><h2 id="宝塔将Java-Web项目部署到Tomcat服务器"><a href="#宝塔将Java-Web项目部署到Tomcat服务器" class="headerlink" title="宝塔将Java Web项目部署到Tomcat服务器"></a>宝塔将Java Web项目部署到Tomcat服务器</h2><p><strong>准备前提：</strong></p><ul><li>一台服务器</li><li>一个Java Web项目</li></ul><ul><li>宝塔服务器运维面板（傻瓜式安装）</li></ul><p>宝塔服务器：</p><p><a href="https://www.bt.cn/?btwaf=97644413" target="_blank" rel="noopener">https://www.bt.cn/?btwaf=97644413</a></p><p><strong>进入官网按步骤操作后进入宝塔面板</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/zmWCPj7l1vTnRAs.png" alt=""></p><p>安装这两个主要的软件（没有数据库连接可以不用，也可以用nignx）,去软件商店中安装想要的软件。</p><p><strong>将Java Web项目打成war包</strong></p><p><strong>点击-&gt; <code>文件</code>-&gt;<code>www</code>-&gt;<code>server</code>&gt;<code>tomcat</code>-&gt;<code>webapps</code></strong></p><p><strong>将war包放到webapps目录中</strong></p><p><strong>重启tomcat服务器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/7kWTsO2YvyAB8aq.png" alt="重启tomcat"></p><p><strong>数据库配置</strong></p><p><strong>创建宝塔服务器数据库，密码会自动生成。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/6EiRU2m7BpTcCjP.png" alt="创建数据库"></p><p><strong>连接数据库的xx.properties文件改为宝塔服务器的数据库。</strong></p><p><strong>最后就可以通过：<code>服务器域名：端口号/项目文件名/</code>  访问了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底搞懂Synchronized和Volatile</title>
      <link href="/2020/02/29/duo-xian-cheng/che-di-gao-dong-synchronized-he-volatile/"/>
      <url>/2020/02/29/duo-xian-cheng/che-di-gao-dong-synchronized-he-volatile/</url>
      
        <content type="html"><![CDATA[<h1 id="彻底搞懂Synchronized和Volatile"><a href="#彻底搞懂Synchronized和Volatile" class="headerlink" title="彻底搞懂Synchronized和Volatile"></a>彻底搞懂Synchronized和Volatile</h1><h2 id="Synchronize基本介绍"><a href="#Synchronize基本介绍" class="headerlink" title="Synchronize基本介绍"></a>Synchronize基本介绍</h2><blockquote><p>什么是Synchronized？谈谈你对Synchronized的理解</p></blockquote><p><strong>Synchronized，是Java中用于解决<code>并发</code>情况下<code>数据同步</code>访问的一个很重要的关键字。当我们想要保证一个共享资源在同一时间只会被一个线程访问到时，我们可以在代码中使用Synchronized关键字对类或者对象加锁。</strong></p><hr><p><strong>简单理解就是一个<code>锁</code>。</strong></p><blockquote><p>Synchronized实现同步的基础是什么？</p></blockquote><p>synchronized实现同步的基础：</p><p>Java中的每一个对象都可以作为锁。具体表现为以下3种形式。</p><ul><li><strong>对于普通同步方法，锁是当前实例对象。</strong></li><li><strong>对于静态同步方法，锁是当前类的Class对象。</strong></li><li><strong>对于同步方法块，锁是Synchonized括号里配置的对象。</strong></li></ul><p>对于普通同步方法和静态同步方法可能会有误解：</p><p>实例对象：<strong>是指我们通过new关键字new出来的那个对象</strong></p><p>Class对象：<strong>是每一个类对应的Class对象。也就是不关你 new 几个xx对象它们都属于同一个Class类的对象。</strong></p><p>可以参考八锁问题深刻理解这个三种方式。</p><hr><blockquote><p>Synchronized的三大特性</p></blockquote><p>这里引用《深入理解Java虚拟机》中的一段话：</p><blockquote><p><strong>synchronized关键字在需要原子性、可见性和有序性这三种特性的时候都可以作为其中一种解决方案，看起来万能的。的确，大部分并发控制操作都能使用synchronized来完成。</strong></p></blockquote><p>可以看到synchronized的三大特性：</p><ul><li><strong>原子性</strong></li><li><strong>可见性</strong></li><li><strong>有序性</strong></li></ul><p>对于这三个特性先给出概念一下再仔细探究</p><p><strong>原子性</strong>：<strong>原子指化学反应不可再分的基本微粒，原子性是指一个操作是不可中断的，要全部执行完成，要不就都不执行。</strong></p><p><strong>可见性：</strong> <strong>可见性是指当多个线程同时访问同一个变量时，一旦又线程改变了这个变量的值，其他线程能够立即看到修改的值。</strong></p><p><strong>有序性：</strong>  <strong>有序性即程序执行的顺序按照代码的先后顺序执行。</strong></p><hr><p>那么我们现在知道了Synchronized可以通过修饰代码块和方法，来确保在同一时刻只有一个线程能够访问代码块里面的内容或者方法。</p><blockquote><p>那这个过程是怎么实现的呢？</p></blockquote><p>这里给出一个案例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对Synchronized Class对象进行加锁</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Test1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//静态同步方法，对Synchronized Class对象进行加锁</span>        <span class="token function">m</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过JDK自带的工具,将Test1.class文件反编译成汇编查看一下synchronized的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/29/ctrXF9B4mgDfV8R.png" alt="代码块"></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/29/dlvDbLVQiWt9Jnm.png" alt="修饰方法"></p><p>《Java并发编程的艺术》中给出的解释：</p><blockquote><p><strong>上面class信息中，对于同步块的实现使用了<code>monitorenter</code>和<code>monitorexit</code>指令，而同步方法则 是依靠方法修饰符上的<code>ACC_SYNCHRONIZED</code>来完成的。无论采用哪种方式，其本质是对一 个对象的监视器<code>monitor</code>进行获取，而这个获取过程是排他的，也就是同一时刻只能有一个 线程获取到由synchronized所保护对象的监视器。</strong><br><strong>任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取到该对象的监视器才能进入同步块或者同步方法，而没有获 取到监视器（执行该方法）的线程将会被阻塞在同步块和同步方法的入口处，进入BLOCKED状态。</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/29/F9Zcl8B3EXukUIn.png" alt=""></p><p>从图中可以看到，任意线程对Object（Object由synchronized保护）的访问，首先要获得 Object的监视器。如果获取失败，线程进入同步队列，线程状态变为BLOCKED。当访问Object的前驱（获得了锁的线程）释放了锁，则该释放操作唤醒阻塞在同步队列中的线程，使其重新尝试对监视器的获取。</p><p>在<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.11.10" target="_blank" rel="noopener">The Java® Virtual Machine Specification</a>中有关于同步方法和同步代码块的实现原理的介绍，我翻译成中文如下：</p><blockquote><p>方法级的同步是隐式的。同步方法的常量池中会有一个<code>ACC_SYNCHRONIZED</code>标志。当某个线程要访问某个方法的时候，会检查是否有<code>ACC_SYNCHRONIZED</code>，如果有设置，则需要先获得监视器锁，然后开始执行方法，方法执行之后再释放监视器锁。这时如果其他线程来请求执行方法，会因为无法获得监视器锁而被阻断住。值得注意的是，如果在方法执行过程中，发生了异常，并且方法内部并没有处理该异常，那么在异常被抛到方法外面之前监视器锁会被自动释放。</p><p>同步代码块使用<code>monitorenter</code>和<code>monitorexit</code>两个指令实现。可以把执行<code>monitorenter</code>指令理解为加锁，执行<code>monitorexit</code>理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行<code>monitorenter</code>）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行<code>monitorexit</code>指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。</p></blockquote><p>不论是monitorenter、monitorexit、ACC_SYNCHRONIZED、Object.wait()、Object.notify()。这些方法都是基于monitor实现的。monitor是HotSpot虚拟机中采用ObjectMonitor实现，由于水平有限，这里不做介绍。</p><p>现在来对Synchroized的三大特性做出解释：</p><hr><h2 id="Synchroized的三大特性"><a href="#Synchroized的三大特性" class="headerlink" title="Synchroized的三大特性"></a>Synchroized的三大特性</h2><p> <strong>原子性：</strong></p><p>线程是CPU调度的基本单位。CPU有时间片的概念，会根据不同的调度算法进行线程调度。当一个线程获得时间片之后开始执行，在时间片耗尽之后，就会失去CPU使用权。所以在多线程场景下，由于时间片在线程间轮换，就会发生原子性问题。</p><p>在Java中，为了保证原子性，提供了两个高级的字节码指令<code>monitorenter</code>和<code>monitorexit</code>。前面中，介绍过，这两个字节码指令，在Java中对应的关键字就是<code>synchronized</code>。</p><p>通过<code>monitorenter</code>和<code>monitorexit</code>指令，可以保证被<code>synchronized</code>修饰的代码在同一时间只能被一个线程访问，在锁未释放之前，无法被其他线程访问到。因此，在Java中可以使用<code>synchronized</code>来保证方法和代码块内的操作是原子性的。</p><p> <strong>可见性：</strong></p><p>造成不可见性的原因：在Java内存模型中，所有的变量都存在主存中，每条线程拥有自己的工作内存，每一个访问主存的线程都拥有一个主存的拷贝副本，将其放在线程自己的工作内存中，当一个线程对变量进行修改时，先经过工作内存再刷新到主存，另一个持有该变量的线程，再通过自己的工作内存去主存中读取新的数据。</p><p>所以当一个线程修改了数据，对另一个持有该数据的线程来说，这次的更新操作对另一个线程是不可见的。</p><p>Java中这样规定：</p><ul><li><p>线程解锁前,必须把共享变量的最新值刷新到主内存</p></li><li><p>线程加锁时,将清空工作内存中共享变量的值,从而使用共享变量时需要从主内存中重新读取最新的值</p><p><strong>有序性：</strong></p></li></ul><p>除了引入了时间片以外，由于处理器优化和指令重排等，CPU还可能对输入代码进行乱序执行，比如load-&gt;add-&gt;save 有可能被优化成load-&gt;save-&gt;add 。这就是可能存在有序性问题。</p><p>这里需要注意的是，<code>synchronized</code>是无法禁止指令重排和处理器优化的。也就是说，<code>synchronized</code>无法避免上述提到的问题。</p><p>那么，为什么还说<code>synchronized</code>也提供了有序性保证呢？</p><p>这就要再把有序性的概念扩展一下了。Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有操作都是天然有序的。如果在一个线程中观察另一个线程，所有操作都是无序的。</p><p>以上这句话也是《深入理解Java虚拟机》中的原句，但是怎么理解呢？周志明并没有详细的解释。这里我简单扩展一下，这其实和<code>as-if-serial语义</code>有关。</p><p><code>as-if-serial</code>语义的意思指：不管怎么重排序（编译器和处理器为了提高并行度），单线程程序的执行结果都不能被改变。编译器和处理器无论如何优化，都必须遵守<code>as-if-serial</code>语义。</p><p>这里不对<code>as-if-serial语义</code>详细展开了，简单说就是，<code>as-if-serial语义</code>保证了单线程中，指令重排是有一定的限制的，而只要编译器和处理器都遵守了这个语义，那么就可以认为单线程程序是按照顺序执行的。当然，实际上还是有重排的，只不过我们无须关心这种重排的干扰。</p><p>所以呢，由于<code>synchronized</code>修饰的代码，同一时间只能被同一线程访问。那么也就是单线程执行的。所以，可以保证其有序性。</p><ul><li>可见性实例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//资源类</span><span class="token keyword">class</span> <span class="token class-name">H</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        H h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-> num的值："</span><span class="token operator">+</span> h<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-> num的值："</span><span class="token operator">+</span> h<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            h<span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-> num的值："</span><span class="token operator">+</span> h<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main-&gt; num的值：2<br>A-&gt; num的值：2<br>main-&gt; num的值：1</p><hr><h2 id="Volatile基本介绍"><a href="#Volatile基本介绍" class="headerlink" title="Volatile基本介绍"></a>Volatile基本介绍</h2><blockquote><p> 请你谈谈你对 Volatile 的理解</p></blockquote><p> Volatile 是轻量级的Synchronized，它的实现确保了可见性以及指令重排，不能够实现同步。</p><ul><li><p>1、保证可见性 </p></li><li><p>2、不保证原子性</p></li><li><p>3、禁止指令重排</p></li></ul><p><strong>Valatile定义：</strong></p><blockquote><p><strong>Java语言规范第3版中对volatile的定义如下：Java编程语言允许线程访问共享变量，为了 确保共享变量能被准确和一致地更新，线程应该确保通过排他锁单独获得这个变量。Java语言 提供了volatile，在某些情况下比锁要更加方便。如果一个字段被声明成volatile，Java线程内存</strong><br><strong>模型确保所有线程看到这个变量的值是一致的。</strong></p></blockquote><hr><h2 id="Volatile的三大特性"><a href="#Volatile的三大特性" class="headerlink" title="Volatile的三大特性"></a>Volatile的三大特性</h2><ul><li><strong>保证可见性</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不加 volatile 程序就会死循环！    </span>    <span class="token comment" spellcheck="true">// 加 volatile 可以保证可见性</span>    <span class="token comment" spellcheck="true">// 可见性： 可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/26/VLwsjHvixOErZn3.png" alt="没有volatile关键字"></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/26/wNpodxMlj7qPz4h.png" alt="有volatile关键字"></p><p><strong>深入探究一下Volatile 可见性的原因</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 模拟一个demo去给volatile 类型变量num赋值</span><span class="token comment" spellcheck="true">// 我们通过工具查看 对valatile进行写操作时，CPU做的事情</span>    <span class="token keyword">volatile</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        JMMDemo jmmDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        jmmDemo<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>0x000001bc005902d9: lock add dword ptr</strong></p><p>通过查IA-32架 构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事情。</p><ul><li><strong>将当前处理器缓存行的数据写回到系统内存。</strong></li><li><strong>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></li></ul><p>volatile的两条实现原则：</p><blockquote><p><strong>摘自《Java并发编程的艺术》</strong></p><ul><li>Lock前缀指令会引起处理器缓存回写到内存。Lock前缀指令导致在执行指令期间，声 言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以 独占任何共享内存[2]。是，在最近的处理器里，LOCK＃信号一般不锁总线，而是锁缓存，毕 竟锁总线开销的比较大。对于Intel486和 Pentium处理器，在锁操作时，总是在总线上声言LOCK#信号。但在P6和目前的处理器中，如果 访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反它会锁定这块内存区 域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁 定”，<strong>缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</strong></li><li>一个处理器的缓存回写到内存会导致其他处理器的缓存无效。IA-32处理器和Intel 64处 理器使用MESI（修改、独占、共享、无效）控制协议去维护内部缓存和其他处理器缓存的一致 性。在多核处理器系统中进行操作的时候，IA-32和Intel 64处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的 缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，<strong>如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。</strong></li></ul></blockquote><ul><li><strong>不保证原子性（和事务的原子性一个意思）</strong></li></ul><p><strong>原子性 : 不可分割</strong><br><strong>线程A在执行任务的时候，不能被打扰的，也不能被分割。要么同时成功，要么同时失败</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>防止指令重排</strong></li></ul><p><strong>volatile关键字通过内存屏障来防止指令被重排序。</strong></p><p><strong>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。然而，对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能，为此，Java内存模型采取保守策略。</strong></p><p><strong>下面是基于保守策略的JMM内存屏障插入策略：</strong></p><ul><li><strong>在每个volatile写操作的前面插入一个StoreStore屏障。</strong></li><li><strong>在每个volatile写操作的后面插入一个StoreLoad屏障。</strong></li><li><strong>在每个volatile读操作的后面插入一个LoadLoad屏障。</strong></li><li><strong>在每个volatile读操作的后面插入一个LoadStore屏障。</strong></li></ul><p><strong>volatile的两条语义保证了线程间共享变量的及时可见性，但整个过程并没有保证同步，这是与volatile的使命有关的，创造它的背景就是在某些情况下可以代替synchronized实现可见性的目的，规避synchronized带来的线程挂起、调度的开销。如果volatile也能保证同步，那么它就是个锁，可以完全取代synchronized了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><strong>Java中实现多线程共享变量的可见性方法有synchronize 和 volatile 。</strong></p></li><li><p><strong>synchronize:可以用在方法或者代码块上,能保证可见性,也能保证原子性。</strong></p></li><li><p><strong>volatitle:用在变量上,只保证可见性,不保证原子性,不加锁,比synchronize轻量级,不会造成线程阻塞.volatitle读相当于加锁,volatitle写相当于解锁。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
            <tag> Synchronize </tag>
            
            <tag> Volatiie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性:函数式编程以及Stream流式计算</title>
      <link href="/2020/02/27/java/java8-xin-te-xing-han-shu-shi-bian-cheng/"/>
      <url>/2020/02/27/java/java8-xin-te-xing-han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8新特性-black-heart-函数式接口以及Stream流式计算"><a href="#Java8新特性-black-heart-函数式接口以及Stream流式计算" class="headerlink" title="Java8新特性:black_heart:函数式接口以及Stream流式计算"></a>Java8新特性:black_heart:函数式接口以及Stream流式计算</h1><h2 id="1-四大函数式接口"><a href="#1-四大函数式接口" class="headerlink" title="1.四大函数式接口"></a>1.四大函数式接口</h2><p>java 8 四大新特性：  <strong>Lambda表达式</strong>，<strong>链式编程</strong>， <strong>函数式接口</strong>，<strong>Stream流式计算</strong>。</p><blockquote><ul><li>什么是函数式接口</li></ul><p><strong>有且只有一个抽象方法的接口被称为函数式接口，函数式接口适用于函数式编程的场景，Lambda就是Java中函数式编程的体现，可以使用Lambda表达式创建一个函数式接口的对象，一定要确保接口中有且只有一个抽象方法，这样Lambda才能顺利的进行推导。必须要有@FunctionalInterface 注解，可以有默认方法。</strong></p></blockquote><p><strong>带有@FunctionalInterface注解的接口就是函数式接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 泛型、枚举、反射 </span><span class="token comment" spellcheck="true">// lambda表达式、链式编程、函数式接口、Stream流式计算 </span><span class="token comment" spellcheck="true">// 超级多FunctionalInterface </span><span class="token comment" spellcheck="true">// 简化编程模型，在新版本的框架底层大量应用！ </span><span class="token comment" spellcheck="true">// foreach(消费者类的函数式接口)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/20200222175528.png" alt="四大常用函数式接口"></p><p><strong>主要语法:</strong></p><ol><li><strong>() -&gt;{} 代表了 lambda的一个表达式</strong></li><li><strong>单行代码无需写return (无论函数式接口有没有返回值),花括号</strong></li><li><strong>多行代码必须写花括号,有返回值的一定要写返回值</strong></li><li><strong>单行代码且有参数的情况下可以不写 ()  如  s-&gt;System.out.println(s)</strong></li><li><strong>(T t)中的参数类型可写可不写</strong></li></ol><p><strong>函数式编程的思想</strong></p><pre><code>        1. **我们都知道可以用匿名内部类的方式去new 一个接口（Runnable接口的实现）**           2. **在JDK8中的官方文档中，lambda表示可以代替匿名内部类去创建函数式接口。**</code></pre><center>举例四大函数式接口：</center><blockquote><p><strong>Function 函数型接口, 有一个输入参数，有一个输出</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Function function = new Function  &lt;String, String>() {</span>        <span class="token comment" spellcheck="true">//    @Override</span>        <span class="token comment" spellcheck="true">//    public String apply ( String str ) {</span>        <span class="token comment" spellcheck="true">//        return str;</span>        <span class="token comment" spellcheck="true">//    }</span>        <span class="token comment" spellcheck="true">//};</span>        Function function <span class="token operator">=</span> <span class="token punctuation">(</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> function<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">(</span> <span class="token string">"ads"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Predicate断定型接口： 有一个输入参数， 返回值只能是布尔值</strong>。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断字符是否为控</span>        <span class="token comment" spellcheck="true">//Predicate &lt;String> predicate = new Predicate &lt;> ( ) {</span>        <span class="token comment" spellcheck="true">//    @Override</span>        <span class="token comment" spellcheck="true">//    public boolean test ( String str ) {</span>        <span class="token comment" spellcheck="true">//        return str.isEmpty ( );</span>        <span class="token comment" spellcheck="true">//    }</span>        <span class="token comment" spellcheck="true">//};</span>        Predicate <span class="token operator">&lt;</span>String<span class="token operator">></span> predicate <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> predicate<span class="token punctuation">.</span><span class="token function">test</span> <span class="token punctuation">(</span> <span class="token string">"123"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Consumer消费型接口，只有输入值，没有返回值</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Consumer &lt;String> consumer = new Consumer &lt;> ( ) {</span>        <span class="token comment" spellcheck="true">//    @Override</span>        <span class="token comment" spellcheck="true">//    public void accept ( String str ) {</span>        <span class="token comment" spellcheck="true">//        System.out.println ( str );</span>        <span class="token comment" spellcheck="true">//    }</span>        <span class="token comment" spellcheck="true">//};</span>        Consumer <span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span> <span class="token punctuation">(</span> <span class="token string">"测试Consumer"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>Supplier 供给型接口，没有参数，有返回值</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Supplier &lt;Object> supplier = new Supplier &lt;> ( ) {</span>        <span class="token comment" spellcheck="true">//    @Override</span>        <span class="token comment" spellcheck="true">//    public Integer get () {</span>        <span class="token comment" spellcheck="true">//        return 1024;</span>        <span class="token comment" spellcheck="true">//    }</span>        <span class="token comment" spellcheck="true">//};</span>        Supplier  supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> supplier<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-流式计算"><a href="#2-流式计算" class="headerlink" title="2. 流式计算"></a>2. 流式计算</h2><blockquote><ul><li>什么是Java Stream流</li></ul><p><strong>流提供了一种让我们可以在比集合更高的概念级别上指定计算的数据视图。通过使用流，我们可以说明想要完成什么任务，而不是说明如何去实现它。将操作的调度留给具体实现去做。</strong></p><p><strong>流遵循了做什么而非怎么做的原则。在流的示例中，我们描述了需要做什么，没有指定该操作应该以什么顺序或者在哪个线程中执行。</strong></p></blockquote><p>流和集合的差异：</p><ol><li><strong>流并不存储元素，这些元素可能存储在底层的集合中，或者是按需生成的。</strong></li><li><strong>流的操作不会修改其数据源。例如，filter方法不会从新的流中移除元素，而是会生成一个新的流，其中不包含被过滤掉的元素。</strong></li><li><strong>流的操作是尽可能惰性执行的。这意味着直至需要其结果时，操作才会执行。</strong></li></ol><p><strong>Collection中的stream（）方法可以将当前集合转变为Stream流对象</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">default</span> Stream<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> StreamSupport<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>对于数组可以通过 Stream.of（）静态方法去创建</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Stream<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Stream</strong>的操作符大体上分为两种：<strong>中间操作符</strong>和<strong>终止操作符</strong></p><p><strong>中间操作符</strong></p><ul><li><p>filter        元素过滤：对Stream对象按指定的Predicate进行过滤，返回的Stream对象中仅包含未被过滤的元素</p></li><li><p>map            元素一对一转换：使用传入的Function对象对Stream中的所有元素进行处理，返回的Stream对象中的元素为原元素处理后的结果</p></li><li><p>mapToInt    元素一对一转换：将原Stream中的使用传入的IntFunction加工后返回一个IntStream对象</p></li><li><p>flatMap     元素一对多转换：对原Stream中的所有元素进行操作，每个元素会有一个或者多个结果，然后将返回的所有元素组合成一个统一的Stream并返回；</p></li><li><p>distinct        去重：返回一个去重后的Stream对象</p></li><li><p>sorted          排序：返回排序后的Stream对象</p></li><li><p>peek             使用传入的Consumer对象对所有元素进行消费后，返回一个新的包含所有原来元素的Stream对象</p></li><li><p>limit              获取有限个元素组成新的Stream对象返回</p></li><li><p>skip          抛弃前指定个元素后使用剩下的元素组成新的Stream返回</p></li></ul><p><strong>常用的终止操作符</strong></p><ul><li><p>collect 收集操作，将所有数据收集起来，这个操作非常重要，官方的提供的Collectors 提供了非常多收集器，可以说Stream 的核心在Collectors。</p></li><li><p>count 统计操作，统计最终的数据个数。</p></li><li><p>findFirst、findAny 查找操作，查找第一个、查找任何一个 返回的类型为Optional。</p></li><li><p>noneMatch、allMatch、anyMatch 匹配操作，数据流中是否存在符合条件的元素 返回值为bool 值。</p></li><li><p>min、max 最值操作，需要自定义比较器，返回数据流中最大最小的值。</p></li><li><p>reduce 规约操作，将整个数据流的值规约为一个值，count、min、max底层就是使用reduce。</p></li><li><p>forEach、forEachOrdered 遍历操作，这里就是对最终的数据进行消费了。</p></li><li><p>toArray 数组操作，将数据流的元素转换成数组。</p></li></ul><ul><li>举例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查找所有包含t的元素并进行打印</span>Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">,</span> <span class="token string">"teeeee"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>str <span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">contains</span> <span class="token punctuation">(</span> <span class="token string">"t"</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">(</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将所有字符串大写</span>Stream<span class="token punctuation">.</span><span class="token function">of</span> <span class="token punctuation">(</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"teeeee"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">(</span> String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">(</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//去重</span>Stream<span class="token punctuation">.</span><span class="token function">of</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">(</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <strong>Optional</strong></p><p>用于简化Java中对空值的判断处理，以防止出现各种空指针异常。<br>Optional实际上是对一个变量进行封装，它包含有一个属性value，实际上就是这个变量的值。</p><p>用于创建一个空的Optional对象；其value属性为Null。<br>如：</p><pre class="line-numbers language-java"><code class="language-java">Optional o <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据传入的值构建一个Optional对象;<br>传入的值必须是非空值，否则如果传入的值为空值，则会抛出空指针异常。<br>使用：</p><pre class="line-numbers language-java"><code class="language-java">o <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">String S <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>Optional<span class="token punctuation">.</span><span class="token function">of</span> <span class="token punctuation">(</span> S <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"str不为空，str = "</span> <span class="token operator">+</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//变量为空时提供默认值</span>Optional<span class="token punctuation">.</span><span class="token function">of</span> <span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofNullable</span> <span class="token punctuation">(</span> <span class="token string">"default"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">(</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关于lambda表达式可以看：这篇文章《》<a href="https://juejin.im/post/5d2d15825188253d7201d297#heading-4" target="_blank" rel="noopener">https://juejin.im/post/5d2d15825188253d7201d297#heading-4</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式接口 </tag>
            
            <tag> Stream流式计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习（二）：Redis的常用key命令</title>
      <link href="/2020/02/27/redis/redis-de-chang-yong-key-ming-ling/"/>
      <url>/2020/02/27/redis/redis-de-chang-yong-key-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis的常用key命令"><a href="#Redis的常用key命令" class="headerlink" title="Redis的常用key命令"></a>Redis的常用key命令</h1><ul><li><strong>常用的key命令:</strong></li></ul><p><strong>DEL key</strong></p><blockquote><p>该命令用于在 key 存在时删除 key。 成功返回1，失败返回0</p></blockquote><p><strong>EXISTS  key</strong></p><blockquote><p>判断key是否存在  存在返回1，不存在返回0</p></blockquote><p><strong>EXPIRE key seconds</strong></p><blockquote><p>给key设置生存时间 单位：秒</p></blockquote><p><strong>TTL key</strong></p><blockquote><p>返回key 剩余的生存时间  </p></blockquote><p><strong>MOVE key db</strong></p><blockquote><p>将当前数据库的 key 移动到给定的数据库 db 当中。 </p></blockquote><p>TYPE key</p><blockquote><p>返回key的数据类型</p></blockquote><p><strong>RENAME key newkey</strong></p><blockquote><p>将key重命名为newkey</p></blockquote><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><p>String 类型 Java String</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型和Volatile</title>
      <link href="/2020/02/26/java/jmm-nei-cun-mo-xing/"/>
      <url>/2020/02/26/java/jmm-nei-cun-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM内存模型和Volatile"><a href="#JVM内存模型和Volatile" class="headerlink" title="JVM内存模型和Volatile"></a>JVM内存模型和Volatile</h1><h2 id="1-JMM"><a href="#1-JMM" class="headerlink" title="1. JMM"></a>1. JMM</h2><blockquote><p>什么是JMM</p></blockquote><p>JMM ： Java内存模型，不存在的东西，概念！约定！  </p><p><strong>关于JMM的一些同步的约定：</strong></p><ul><li>1、线程解锁前，必须把共享变量立刻刷回主存。</li><li>2、线程加锁前，必须读取主存中的新值到工作内存中！</li><li>3、加锁和解锁是同一把锁  </li></ul><p>线程  工作内存  、主内存</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-Volatile"><a href="#2-Volatile" class="headerlink" title="2. Volatile"></a>2. Volatile</h2><blockquote></blockquote><h2 id="3-指令重排"><a href="#3-指令重排" class="headerlink" title="3. 指令重排"></a>3. 指令重排</h2><p>什么是指令重排： 计算机并不是按照我们写的程序顺序去执行的</p><p>源代码-&gt; 编译器优化的重排-&gt;指令并行也会重排-&gt;内存系统也会重排-&gt;执行</p><p>处理器在进行指令重排的时候，考虑：数据之间的依赖性</p><p>int x = 1; // 1<br>int y = 2; // 2<br>x = x + 5; // 3<br>y = x * x; // 4<br>我们所期望的：1234  但是可能执行的时候回变成 2134  1324 可不可能是  4123</p><h2 id="4-深入理解CAS"><a href="#4-深入理解CAS" class="headerlink" title="4.深入理解CAS"></a>4.深入理解CAS</h2><blockquote><p>什么是CAS</p></blockquote><h2 id="5-各种锁"><a href="#5-各种锁" class="headerlink" title="5.各种锁"></a>5.各种锁</h2><ul><li><p><strong>公平锁： 非常公平， 不能够插队，必须先来后到！</strong></p></li><li><p><strong>非公平锁：非常不公平，可以插队 （默认都是非公平）</strong></p></li></ul><pre class="line-numbers language-javajava"><code class="language-javajava">//默认非公平锁public ReentrantLock() {    sync = new NonfairSync();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><strong>可重入锁</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式</title>
      <link href="/2020/02/25/java/23-chong-she-ji-mo-shi-1/"/>
      <url>/2020/02/25/java/23-chong-she-ji-mo-shi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h1><h2 id="软件设计模式的概念："><a href="#软件设计模式的概念：" class="headerlink" title="软件设计模式的概念："></a>软件设计模式的概念：</h2><blockquote><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p></blockquote><p><strong>在软件设计模式之中，最出名的莫过于GoF(Gang of Four)</strong></p><p><strong>GoF在《设计模式：可复用面向对象软件的基础》一书种收录了23种设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。</strong></p><h3 id="设计模式的六大原则："><a href="#设计模式的六大原则：" class="headerlink" title="设计模式的六大原则："></a>设计模式的六大原则：</h3><blockquote><p> <strong>总原则：扩展开放，对修改关闭</strong></p><p>在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p><p>1、单一职责原则</p><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p><p>2、里氏替换原则</p><p> 里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><p> 3、依赖倒转原则</p><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><p>4、接口隔离原则</p><p> 这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p><p> 5、迪米特法则（最少知道原则）</p><p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p><p> 6、合成复用原则</p><p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p></blockquote><h3 id="从概念上简单介绍这23种设计模式"><a href="#从概念上简单介绍这23种设计模式" class="headerlink" title="从概念上简单介绍这23种设计模式"></a>从概念上简单介绍这23种设计模式</h3><blockquote><ul><li><p><strong>单例模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</strong></p></li><li><p><strong>原型模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</strong></p></li><li><p><strong>工厂方法模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</strong></p></li><li><p><strong>抽象工厂模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</strong></p></li><li><p><strong>建造者模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</strong></p></li><li><p><strong>代理模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</strong></p></li><li><p><strong>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</strong></p></li><li><p><strong>桥接模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</strong></p></li><li><p><strong>装饰模式：动态的给对象增加一些职责，即增加其额外的功能。</strong></p></li><li><p><strong>外观模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</strong></p></li><li><p><strong>享元模式：运用共享技术来有效地支持大量细粒度对象的复用。</strong></p></li><li><p><strong>组合模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</strong></p></li><li><p><strong>模板方法模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</strong></p></li><li><p><strong>策略模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</strong></p></li><li><p><strong>命令模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</strong></p></li><li><p><strong>职责链模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</strong></p></li><li><p><strong>状态模式：允许一个对象在其内部状态发生改变时改变其行为能力。</strong></p></li><li><p><strong>观察者模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</strong></p></li><li><p><strong>中介者模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</strong></p></li><li><p><strong>迭代器模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</strong></p></li><li><p><strong>访问者模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</strong></p></li><li><p><strong>备忘录模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</strong></p></li><li><p><strong>解释器模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</strong></p></li></ul></blockquote><h3 id="根据其用途划分我们将其分为三大类"><a href="#根据其用途划分我们将其分为三大类" class="headerlink" title="根据其用途划分我们将其分为三大类"></a>根据其用途划分我们将其分为三大类</h3><ul><li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li><li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li><li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p><strong>创建型模式的特点</strong></p><blockquote><p><strong>创建型模式的作用就是创建对象，说到创建一个对象，最熟悉的就是 new 一个对象，然后 set 相关属性。但是，在很多场景下，我们需要给客户端提供更加友好的创建对象的方式，尤其是那种我们定义了类，但是需要提供给其他开发者用的时候。</strong></p><p><strong>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产。</strong></p></blockquote><hr><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式的定义：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。</p><p>核心本质</p><ul><li><strong>实例化对象不适用new，用工厂方法代替</strong></li><li><strong>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦。</strong></li></ul><p>工厂方法模式的主要优点有：</p><ul><li><strong>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</strong></li><li><strong>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</strong></li></ul><p>其缺点是：<strong>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</strong></p><p>下面举例：</p><ul><li><strong>传统方法</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//car接口</span><span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//宝马实体类继承Car</span><span class="token keyword">class</span> <span class="token class-name">BMW</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//奔驰实体类继承Car</span><span class="token keyword">class</span> <span class="token class-name">MB</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorMode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bmw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        bmw<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我们平常创建对象的方法，创建一个Car接口， 创建各种各样品牌的车（类）去继承这个Car接口，然后调用  Car xx = new xx(); 这样去得到一个xx品牌的车。</p><ul><li><strong>工厂方法</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生成car的工厂</span><span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span> String car <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorMode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bmw <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        bmw<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/OghYlX4GKxsn329.png" alt="关系依赖图"></p><p>可以看到，我们想要得到不同品牌的汽车实现类的时候，不用去new一个对象，直接传递参数给CarFactory就可以得到我们想要的汽车。</p><p>简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。</p><blockquote><p><strong>我们强调职责单一原则，一个类只提供一种功能，CarFactory 的功能就是只要负责生产各种 Car。</strong></p></blockquote><p>那假如呢，我们想要得到摩拜单车，那该怎么做呢？</p><p>只能去创建一个摩拜单车实体类，然后修改CarFactory里面的方法，添加创建摩拜单车的方法。</p><p>这样做的缺陷在于：我们想要去添加新的品牌汽车的时候，要去修改CarFactory，不满足我们的 <strong>对修改关闭，对扩展开放原则</strong>。</p><p><strong>解决方案：</strong></p><blockquote><p><strong>从上面的案例中我们可以看出，区别与传统的创建对象方法，我们在原有的基础上，建立了一个 CarFactory 去根据传入的参数创建了我们想要得到的对象，这样符合（将产品对象的实际创建工作推迟到具体子工厂类当中）这一要求。</strong></p><p><strong>那么我们可以创建某个品牌车的车工厂， 然后车工厂继承CarFactory,  CarFactory中只有一个得到车的方法。</strong></p><p><strong>这样当我们想要添加新的品牌车的时候，只需要创建对应的车工厂类，然后继承CarFactory 这样符合了我们（对修改关闭，对扩展开放） 的原则，这就是简单工厂方法模式</strong></p></blockquote><hr><h3 id="简单工厂方法模式"><a href="#简单工厂方法模式" class="headerlink" title="简单工厂方法模式"></a>简单工厂方法模式</h3><ul><li><strong>简单工厂方法</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//所有的车共有组件</span><span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//所有车的工厂</span><span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//奔驰车工厂</span><span class="token keyword">class</span> <span class="token class-name">BMWFacrot</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//宝马车工厂</span><span class="token keyword">class</span> <span class="token class-name">MBFacrot</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//宝马车实体类</span><span class="token keyword">class</span> <span class="token class-name">BMW</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//奔驰车实体类</span><span class="token keyword">class</span> <span class="token class-name">MB</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bwm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMWFacrot</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">MBFacrot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bwm<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>新增</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MobaiBicycle</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"摩拜单车拉拉！！"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MoBaiBicycleFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MobaiBicycle</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bwm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMWFacrot</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">MBFacrot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bwm<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新添加的摩拜单车</span>        Car mobai <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">MoBaiBicycleFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobai<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>运行结果</strong></p><p>​    <strong>奔驰</strong><br>​    <strong>宝马</strong><br>​    <strong>摩拜单车拉拉！！</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/C38NjHY51iZms2K.png" alt="依赖图"></p><hr><h3 id="抽象工厂方法模式"><a href="#抽象工厂方法模式" class="headerlink" title="抽象工厂方法模式"></a>抽象工厂方法模式</h3><p><strong>定义：</strong></p><p>抽象工厂模式提供了一个创建一系列相关或相互依赖对象的接口，无需为他们指定具体的实现类</p><p><strong>优点：</strong></p><p>具体产品在应用层的代码隔离，无需关心创建的细节</p><p>将一个系列的产品统一到一起创建</p><p><strong>缺点：</strong></p><p>规定了所有可能被创建的产品集合，产品族中拓展新的产品困难</p><p>增加了系统的抽象性和理解难度</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/xoZlOYQMvIb4ePB.png" alt="关系类图"></p><p>由于代码有点多就不全部展示，只对其中的类做讲解。</p><p>IProductFactory ：所有工厂的总工厂，其中包含要生产的产品。</p><p>Iphone、Router： 手机产品、路由器产品。</p><p>XiaomiFactory：小米工厂，生产小米的产品。</p><p>HuaweiFactory： 华为工厂，生产华为的产品。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"--------小米--------"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        XiaomiFactory xiaomiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Iphone iphone <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">iphone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">sendmsg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Router router <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">router</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">openwifi</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"--------华为--------"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        HuaweiFactory huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Iphone iphone1 <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">iphone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span><span class="token function">sendmsg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Router router1 <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">router</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        router1<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router1<span class="token punctuation">.</span><span class="token function">openwifi</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router1<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>运行结果</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/rn6POINJW457FoU.png" alt=""></p><blockquote><p>当然，抽象工厂的问题也是显而易见的，比如我们要加个显示器，就需要修改所有的工厂，给所有的工厂都加上制造显示器的方法。这有点违反了<strong>对修改关闭，对扩展开放</strong>这个设计原则。</p></blockquote><p>关于产品等级结构和产品族</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/kj6qLSlFnVpEbsZ.png" alt=""></p><hr><h3 id="工厂方法模式在JDK中的应用"><a href="#工厂方法模式在JDK中的应用" class="headerlink" title="工厂方法模式在JDK中的应用"></a>工厂方法模式在JDK中的应用</h3><ul><li><strong>简单工厂方法</strong></li></ul><p><strong>java.util.Calendar包下的createCalendar方法</strong></p><p><strong>这里贴出的源码只截取了与简单工厂方法相关的。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//标准的静态方法</span><span class="token keyword">private</span> <span class="token keyword">static</span> Calendar <span class="token function">createCalendar</span><span class="token punctuation">(</span>TimeZone zone<span class="token punctuation">,</span>  Locale aLocale<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*  *还有其他内容  **/</span>    <span class="token comment" spellcheck="true">//根据传入的值，创建不同的对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aLocale<span class="token punctuation">.</span><span class="token function">hasExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String caltype <span class="token operator">=</span> aLocale<span class="token punctuation">.</span><span class="token function">getUnicodeLocaleType</span><span class="token punctuation">(</span><span class="token string">"ca"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caltype <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>caltype<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"buddhist"</span><span class="token operator">:</span>            cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuddhistCalendar</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"japanese"</span><span class="token operator">:</span>                cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JapaneseImperialCalendar</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"gregory"</span><span class="token operator">:</span>                cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>抽象工厂方法</strong></li></ul><p>先看一张关系图</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/RYNOkEDtBngZHVj.png" alt="Collection中的依赖"></p><p>Collection接口中的Iterator<E> iterator();方法，这个方法继承自Iterable()不重要</p><p>可以把Collection看作总的抽象工厂，其中的Iterable()方法等等其他方法都可以看作是Collection的产品。</p><p>Collection工厂把这些产品交给 各自的工厂(ArrayList、HashSet),去实现各自的功能。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这是ArrayList中的iterator方法</span><span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而Itr()就是ArrayList自己实现的内部类，里面定义属于ArrayList的hasNext()、next() 。。。等等这些方法。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/c4yLfsXxE6lhka5.png" alt="Itr内部类"></p><p>用这些方法去遍历ArrayList。</p><p><strong>总的产品Iterator接口里面会定义产品所需功能的细节，然后在交给各个品牌不同的工厂来实现</strong></p><blockquote><p>　　<strong>看懂上面的之后就特别好理解抽象工厂，抽象工厂模式与工厂方法模式的最大区别就在于，工厂方法模式针对的是一个产品等级结构；（比如Iterator()方法的不同实现）而抽象工厂模式则需要面对多个产品等级结构（Collection接口下的不同方法,）。再说明白一点就是：Collection就是一个抽象工厂，它提供了一个产品类的库，所有产品都以同样接口出现，从而使客户端不依赖于具体实现。工厂方法则是抽象工厂里面的其中一个产品类，并且把这个方法的实例化放入具体的实现类中</strong> </p></blockquote><hr><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><strong>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</strong></p><p><strong>优点</strong></p><ul><li>由于单例模式只能生成一个实例，减少了系统的性能开销。</li><li>单例模式可以再系统设置全局的访问点，优化共享资源的访问。</li></ul><p><strong>常见的五种单例模式的实现方式</strong></p><ul><li>饿汉式 </li><li>懒汉式</li><li>DCL懒汉式</li><li>饿汉式改进</li><li>枚举单例</li></ul><ul><li><strong>饿汉式</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singletondemo1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">Singletondemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类初始化时，立即加载这个对象 不会涉及多线程问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singletondemo1 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供获取该对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singletondemo1 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">demotest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singletondemo1 instance <span class="token operator">=</span> Singletondemo1<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singletondemo1 instance2 <span class="token operator">=</span> Singletondemo1<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"true"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>饿汉模式的问题</strong></p><blockquote><p>假设我们在单例模式中开辟了许多的空间， private byte []data1 = new byte[1024];… 很多很多</p><p>那么这些空间会随着Static方法创建并占用内存，如果我们长时间不去调用instance实例，这些空间就浪费了。</p><p>解决方案就是再添加一个方法去创建instance实例，这就是<strong>懒汉式</strong></p></blockquote><ul><li><strong>懒汉式</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singletondemo2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">Singletondemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类初始化时，不加载这个对象 会涉及多线程问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singletondemo2 instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供了获取该对象的方法，有synchronized，效率会降低</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singletondemo2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>DCL懒汉式</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">Singletondemo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类初始化时，立即加载这个对象 不会涉及多线程问题</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singletondemo3 instance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span>  Singletondemo3 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//线程竞争这个锁，获得锁的线程进来，去判断是否创建实例。</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singletondemo3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo3</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不是一个原子性的操作</span>           <span class="token comment" spellcheck="true">/*            1、分配内存空间              2、执行构造方法，初始化对象             3、把这个对象指向这个空间             * 123 线程走A没问题            * 132 假设一个线程B走132后，再进来一个线程，就不会判断instance ==null 直接返回了            *此时的instance 还没完成初始化            **/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双重检测锁，将锁的范围更加精细化。</strong></p><p><strong>只有在线程进来后，判断是否创建对象，如果没有就创建，有就返回。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singletondemo4</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singletondemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singletondemo4 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo4</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> Singletondemo4 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">demotest2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        Singletondemo4 instance <span class="token operator">=</span> Singletondemo4<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singletondemo4 instance2 <span class="token operator">=</span> Singletondemo4<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor <span class="token operator">&lt;</span>Singletondemo4<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> Singletondemo4<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span> <span class="token punctuation">(</span> null <span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span> <span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Singletondemo4 instance3 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> instance <span class="token operator">==</span> instance3 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们都知道通过反射可以创建，而且反射中的方法可以强制忽略private关键字，这样我们的单例模式还是不安全</strong></p><p><strong>通过序列化与反序列化操作也可以破坏双重校验锁的模式</strong></p><p><strong>我们点进newInstance ( )方法可以看到：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/NfT5OCywLaJvim3.png" alt=""></p><p><strong>如果反射想要创建的对象是枚举类型，就会抛出一样异常，所以我们可以通过枚举来创建单例模式来防止通过反射破坏单例，枚举创建的单例模式线程安全，创建简单，但是无法延时加载</strong></p><ul><li><strong>枚举</strong></li></ul><pre><code>public enum Singletondemo5 {    INSTANCE;    public Singletondemo5 getInstance(){        return INSTANCE;    }}class demo5{    public static void main ( String[] args ) {        Singletondemo5 instance = Singletondemo5.INSTANCE;        Singletondemo5 instance1 = Singletondemo5.INSTANCE;        System.out.println ( instance == instance1 );    }}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/AerbMunQ3xBRmhs.png" alt="枚举的知识"></p><h3 id="单例模式在JDK中的应用"><a href="#单例模式在JDK中的应用" class="headerlink" title="单例模式在JDK中的应用"></a>单例模式在JDK中的应用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Runtime currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Version version<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Runtime <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*     *一下省略部分代码     **/</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们熟知在Spring中Bean的创建也有单例模式，我们等到解读Spring 源码的时候在做分析。</p><hr><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>概念：</p><p>　　将一个复杂对象的构建与它的表示分离。使得同样构建过程可以创建不同表示</p><p>适用场景：</p><ol><li>一个对象有很多属性的情况下</li><li>想把复杂的对象创建和使用分离</li></ol><p>优点：</p><p>　　封装性好，扩展性好</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//建造者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderA</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//汉堡</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderB</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可乐</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderC</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//薯条</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderD</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//甜点</span>    <span class="token keyword">abstract</span> Product <span class="token function">getproduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//产品类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String builda <span class="token operator">=</span> <span class="token string">"汉堡"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String buildb <span class="token operator">=</span> <span class="token string">"可乐"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String buildc <span class="token operator">=</span> <span class="token string">"薯条"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String buildd <span class="token operator">=</span> <span class="token string">"甜点"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Product{"</span> <span class="token operator">+</span>                <span class="token string">"builda='"</span> <span class="token operator">+</span> builda <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", buildb='"</span> <span class="token operator">+</span> buildb <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", buildc='"</span> <span class="token operator">+</span> buildc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", buildd='"</span> <span class="token operator">+</span> buildd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuilda</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builda<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuilda</span> <span class="token punctuation">(</span> String builda <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builda <span class="token operator">=</span> builda<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuildb</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buildb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildb</span> <span class="token punctuation">(</span> String buildb <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildb <span class="token operator">=</span> buildb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuildc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buildc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildc</span> <span class="token punctuation">(</span> String buildc <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildc <span class="token operator">=</span> buildc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuildd</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buildd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildd</span> <span class="token punctuation">(</span> String buildd <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildd <span class="token operator">=</span> buildd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//工人（服务员）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>  <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Worker</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Product product<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderA</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuilda</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderB</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuildb</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderC</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuildc</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderD</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuildd</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Product <span class="token function">getproduct</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟一个肯德基定套餐业务，默认情况下是：汉堡.可乐.薯条.甜点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//产品  &lt; -  自己决定细节 &lt; - 工人</span>        Product product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builderA</span> <span class="token punctuation">(</span> <span class="token string">"全家桶"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builderB</span> <span class="token punctuation">(</span> <span class="token string">"鸡翅"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builderC</span> <span class="token punctuation">(</span> <span class="token string">"雪碧"</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">builderD</span> <span class="token punctuation">(</span> <span class="token string">"冰淇淋"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProduct</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> product <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建造者模式在JDK中的应用"><a href="#建造者模式在JDK中的应用" class="headerlink" title="建造者模式在JDK中的应用"></a>建造者模式在JDK中的应用</h3><pre class="line-numbers language-java"><code class="language-java">StringBuilder s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span> <span class="token string">"这是"</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> <span class="token string">"JDK"</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> <span class="token string">"中的"</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> <span class="token string">"建造者模式"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>工厂模式注重把这个产品创造出来即可，而建造者更关心创建的细节，当创建一个对象需要使用很多步骤去完成的时候，我们可以考虑建造者模式，当创建一个对象比较简单的时候，我们就可以使用工厂模式。通俗一点来理解，建造者模式更像是专门定做一个东西，terator()作为一个工厂方法，它是可以有不同的厂家，但是呢，它完成的都是遍历的功能，而建造者更像是你买一个戒指，你不仅仅要求它能戴在手上，更加希望你的名字被刻在上面这样。就是关注到产品细节的就可以用建造者模式。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk7HashMap探究&amp;手写HashMap</title>
      <link href="/2020/02/23/java/jdk7hashmap-tan-jiu-shou-xie-hashmap/"/>
      <url>/2020/02/23/java/jdk7hashmap-tan-jiu-shou-xie-hashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="jdk1-7HashMap探究-amp-手写HashMap"><a href="#jdk1-7HashMap探究-amp-手写HashMap" class="headerlink" title="jdk1.7HashMap探究&amp;手写HashMap"></a>jdk1.7HashMap探究&amp;手写HashMap</h1><h2 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h2><blockquote><p>什么是HashMap?</p></blockquote><p>简单来说，HashMap是用哈希表（直接一点可以说数组加单链表）的Map实现类。</p><p>在JDK 1.7中HashMap的底层数据结构： <strong>链表</strong> + <strong>数组</strong></p><blockquote><p>什么是Hash</p></blockquote><p>Hash函数是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。</p><p>这种转换是一种压缩映射，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。</p><p><strong>简单来说HashMap就是通过Hash函数把传入的key转化为hash值， 然会对这个值进行操作得到一个下标，这个下标就是这个传入的对象(key, value)在数组中的下标，这个元素就是链表的头节点（在数组当前下标只有一个元素的时候），后续再有元素加进来的时候，就把新加进来的元素作为链表的头结点，原头结点作为新头结点的下一元素。</strong></p><blockquote><p>HashMap字段</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 默认容量 16 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">/** * 默认最大容量 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 默认负载因子 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数组 */</span><span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_TABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 记录容器中的大小 */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//负载</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 可设置的负载因子 */</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 记录进行的put() get()的数量 */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HashMap 的实例有两个参数影响其性能：初始容量 和加载因子。</p><p>容量是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。</p><p>加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。</p><p>当哈希表中的容量超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize操作（即扩容），从而哈希表将具有大约两倍的桶数。</p><blockquote><p>HashMap中两个重要参数的默认值：</p><ul><li>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</li><li>static final float DEFAULT_LOAD_FACTOR = 0.75f;</li></ul></blockquote><p><strong>构造方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  调用下面这个方法 设置初始化容量和负载因子</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                           loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    threshold <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始化容器 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//可以存入一个 key==null 的值</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//算出hash值 2</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过hash值算出这个key，对于的数组下标 3</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历这个结点的链表 4</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一步步介绍put方法中的步骤：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inflateTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> toSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果数组大小不是2的整数幂，就向上取2的整数幂（15就取 16  30 取 32）</span>    <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span>toSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>int capacity = roundUpToPowerOf2(toSize);是很重要的操作，在下面会介绍</strong></p><blockquote><p>取数组下标</p></blockquote><p>对于一个任意的数 N ，我们想要得到 范围：0 ~M的方法（M为数组容量）：</p><p>对于任意值n : n % m 就会得到范围为0~m的数，这个值就可以作为数组的下标。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//取地下标的方法</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span>    <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在HashMap中则是通过  <strong>h &amp; (length-1)</strong>  将 key的hash值 与 数组长度-1进行与操作。</p><p> 而这个数组的长度永远都是2的整数幂，那2的整数幂-1 的二进制的最后几位都是1</p><p>比如：16-1 = 15  （15的二进制：0000 1111）</p><p>这样的操作保证了二进制的最后几位都是1。</p><p>举例：</p><p> <strong>h : xxxx 1010 （假设的一个hash值）</strong></p><p> <strong>l :  0000 1111（length - 1）</strong></p><p> <strong>r:  0000 1010   （结果，就是这个key对应的数组下标）</strong></p><p><strong>这样对于任意一个hash值，他在与(length-1)做与运算后的结果范围永远在： 0~length之间，这样就可以得到了数组的下标</strong></p><p><strong>相比于%得到数组下标，这样做的好处在于位运算的效率比较高。</strong></p><blockquote><p><strong>可以发现一个问题：在做与运算操作的时候，hash值的高位没有参与运算，那么不同的hash值，如果低位相同，通过运算得到的数组下标可能一样，这样散列性就很差。</strong></p></blockquote><p><strong>再看hash()方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> hashSeed<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> h <span class="token operator">&amp;&amp;</span> k <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Hashing<span class="token punctuation">.</span><span class="token function">stringHash32</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    h <span class="token operator">^=</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This function ensures that hashCodes that differ only by</span>    <span class="token comment" spellcheck="true">// constant multiples at each bit position have a bounded</span>    <span class="token comment" spellcheck="true">// number of collisions (approximately 8 at default load factor).</span>    h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>hash（）方法通过对 k进行右移运算和异或运算 ，使得 hash值的低位具有高位的特性，这样算出来的hash值拥有一个良好的散列性，可以解决hash冲突，得到的数组下标就更有意义。</strong></p></blockquote><p><strong>HashMap 链表对象</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    V value<span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Creates new entry.     */</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> K k<span class="token punctuation">,</span> V v<span class="token punctuation">,</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>        next <span class="token operator">=</span> n<span class="token punctuation">;</span>        key <span class="token operator">=</span> k<span class="token punctuation">;</span>        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历这个结点的链表，如果传入一样的key值，判断value是否相等，如果一样新值，覆盖老值，然后返回。</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建新结点</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 添加新元素前先判断数组的大小是否大于等于阀值，如果是且数组下标位置已经存在元素则对数组进行扩容，并对新的key重新根据新的数组长度计算下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//扩容 这是导致hashmap在多线程环境下产生死锁的原因。等下分析</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//table[i]==null 创建头结点, !=null 创建新节点并将其执行原头结点，然后将链表整体后移（即添加链表的方式在头部添加，不在尾部添加）。</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个新结点e 为其赋值为当前位置 talble[bucketIndex]的结点</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个新的头节点，然后next指向e 完成头部插入操作</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 统计元素+1</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>在了解了HashMap头插法创建链表之后，我们来看数组的扩容（头插法的目的是为不用遍历整个链表，提高效率。）</strong></p><ul><li><strong>正是这种提高效率的方法，导致了在多线程环境下，链表变成循环链表产生死锁的原因</strong></li></ul></blockquote><p><strong>扩容</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩容一个新的数组，他的长度是原数组的两倍。</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将旧数组内容，转移到新数组。</span>    <span class="token comment" spellcheck="true">//关键，在多线程环境下会产生死锁。</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新的容量限制 = 新的容量 * 负载因子</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建一个结点，记录当前结点的下一个元素。</span>            Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//计算当前结点在新数组中的位置。</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前结点的next赋值为新数组下标为i的元素</span>            e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前节点赋值给新数组</span>            newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//节点赋值为下一个元素</span>            e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里的扩容操作，我用图来说明。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/579GMWsCgwQzJlf.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/D4WGTZLlRznFX21.png" alt=""></p><blockquote><p>来分析一下产生死锁的情况。</p><p>假设AB两个线程同时进行对容器 进行扩容操作</p></blockquote><h3 id="产生死锁原因分析"><a href="#产生死锁原因分析" class="headerlink" title="产生死锁原因分析"></a>产生死锁原因分析</h3><p><strong>假设这是初始情况</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/Q8ALqr92liuV1Jb.png" alt="初始状况"></p><p><strong>A放了元素刘备之后，这时A线程突然进入等待</strong></p><p><strong>B线程进来，执行扩容操作后的结果如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/mjbH7uq6Gxc9Jfg.png" alt=""></p><p><strong>重点!  线程 A 和线程 B 扩容的数组是私有的，可元素是共有的。</strong></p><p><strong>B执行完操作，线程调度交给A线程</strong></p><p><strong>A放完黄盖和张飞后, 发现本来张飞后面的元素null 变成了刘备,这样就形成了循环链表产生死锁,程序运行到这里cpu100%爆炸。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/laUyw8FVmSvzIud.png" alt=""></p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">getForNullKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null <span class="token operator">==</span> entry <span class="token operator">?</span> null <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getEntry</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>get()方法就很简单了，得到hash值，然后遍历，得到value值，返回。</strong></p><p><strong>就不做分析了，偷个懒。</strong></p><h2 id="手写HashMap"><a href="#手写HashMap" class="headerlink" title="手写HashMap"></a>手写HashMap</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @authoer : zhw * @Date: 2020/2/23 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer CAPACITY <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyHashMap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">put</span><span class="token punctuation">(</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> hash<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> node <span class="token operator">!=</span>null <span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                V oldvalue <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldvalue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addNode</span> <span class="token punctuation">(</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span>index <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addNode</span> <span class="token punctuation">(</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> index <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span> <span class="token punctuation">(</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>K key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> hash<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> node <span class="token operator">!=</span>null <span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MyHashMap{"</span> <span class="token operator">+</span>                <span class="token string">"table="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span> <span class="token punctuation">(</span> table <span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyHashMap <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHashMap</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myHashMap<span class="token punctuation">.</span><span class="token function">put</span> <span class="token punctuation">(</span> i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> myHashMap <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"haha"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V <span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> K key<span class="token punctuation">;</span>    <span class="token keyword">public</span> V value<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span> <span class="token punctuation">(</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> next <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Node{"</span> <span class="token operator">+</span>                <span class="token string">"key="</span> <span class="token operator">+</span> key <span class="token operator">+</span>                <span class="token string">", value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">", next="</span> <span class="token operator">+</span> next <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> K <span class="token function">getKey</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Node <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">getNext</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> V <span class="token function">getValue</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行结果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/qAoY56JNMQUeLRx.png" alt=""></p><h2 id="最后总结一波"><a href="#最后总结一波" class="headerlink" title="最后总结一波"></a>最后总结一波</h2><p>1.7版本的HashMap还是有很大的问题的，在下一个版本1.8中会大有改进。</p><p>最开始的时候，Java 就说明了 HashMap 不应该在高并发情况下使用。</p><p>一般的学习者会认为这是因为它没有做并发处理，所以理所应当地产生大量错读错写，所以不建议使用。</p><p>没错，没一毛钱问题。</p><p>可如果 HashMap 只是这样，那<strong>不叫做设计缺陷, 也不叫BUG</strong> 。</p><p>没有增加并发处理的数据结构在高并发使用时出现错读错写不能叫问题，更别说设计缺陷了。</p><p>总的来说阅读JDK1.7源码，能提高我们阅读源码的能力，可以理解java开发者们的设计思路，所以还是很有意思的。</p><p>那么,我们1.8见…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程进阶-JUC并发编程（2）</title>
      <link href="/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-2/"/>
      <url>/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-2/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程进阶-JUC并发编程（2）"><a href="#多线程进阶-JUC并发编程（2）" class="headerlink" title="多线程进阶-JUC并发编程（2）"></a>多线程进阶-JUC并发编程（2）</h1><h2 id="1-线程池技术"><a href="#1-线程池技术" class="headerlink" title="1. 线程池技术"></a>1. 线程池技术</h2><p>线程池：三大方法、7大参数、4种拒绝策略<br>程序的运行，本质：占用系统的资源！ 优化资源的使用！=&gt;池化技术<br>线程池、连接池、内存池、对象池///…..  创建、销毁。十分浪费资源<br>池化技术：事先准备好一些资源，有人要用，就来我这里拿，用完之后还给我。</p><h3 id="1-1-线程池的好处"><a href="#1-1-线程池的好处" class="headerlink" title="1.1 线程池的好处:"></a>1.1 线程池的好处:</h3><ul><li><p>1、降低资源的消耗</p></li><li><p>2、提高响应的速度 </p></li><li><p>3、方便管理。</p></li></ul><p>线程复用、可以控制最大并发数、管理线程</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/20200222171143.png" alt=""></p><p>线程池：三大方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Exectors 工具类、三大方法 * 使用了线程池之后，使用线程池来创建 * * @authoer : zhw * @Date: 2020/2/22 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ExecutorService threadPool = Executors.newSingleThreadExecutor ( );// 单个线程</span>        <span class="token comment" spellcheck="true">//ExecutorService threadPool = Executors.newFixedThreadPool ( 5 ); //创建一个固定的线程池的大小</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可伸缩的线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用线程池,来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": ok"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Executors源码以及ThreadPoolExecutor源码</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-线程池四种拒绝策略"><a href="#1-2-线程池四种拒绝策略" class="headerlink" title="1.2 线程池四种拒绝策略"></a>1.2 线程池四种拒绝策略</h3><blockquote><ul><li>new ThreadPoolExecutor.AbortPolicy ()  满人了，还有人进来，不处理这个人，抛出异常。</li><li>new ThreadPoolExecutor.CallerRunsPolicy () 哪里来的，去哪里（交给谁执行）</li><li>new ThreadPoolExecutor.DiscardPolicy ()  队列满了 不会抛出异常 会放弃任务</li><li>new ThreadPoolExecutor.DiscardOldestPolicy () 队列满了，会尝试去和最早的竞争 也不会抛出异常 一个尝试性的过程</li></ul></blockquote><h3 id="1-3-7大参数"><a href="#1-3-7大参数" class="headerlink" title="1.3 7大参数"></a>1.3 7大参数</h3><blockquote><ul><li><p>int corePoolSize, // 核心线程池大小                          </p></li><li><p>int maximumPoolSize, // 大核心线程池大小                          </p></li><li><p>long keepAliveTime, // 超时了没有人调用就会释放                          </p></li><li><p>TimeUnit unit, // 超时单位                          </p></li><li><p>BlockingQueue<Runnable> workQueue, // 阻塞队列               </p></li><li><p>ThreadFactory threadFactory, // 线程工厂：创建线程的，一般 不用动                          </p></li><li><p>RejectedExecutionHandler handle // 拒绝策略</p></li></ul></blockquote><blockquote><p>手动创建线程池</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Exectors 工具类、三大方法 * 使用了线程池之后，使用线程池来创建 * * @authoer : zhw * @Date: 2020/2/22 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService threadPool <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token number">3</span><span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可伸缩的线程</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.AbortPolicy ()  满人了，还有人进来，不处理这个人，抛出异常。</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.CallerRunsPolicy () 哪里来的，去哪里（交给谁执行）</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.DiscardPolicy ()  队列满了 不会抛出异常 会放弃任务</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.DiscardOldestPolicy () 队列满了，会尝试去和最早的竞争 也不会抛出异常 一个尝试性的过程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最大承载： deque + max</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用线程池,来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": ok"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 小结和拓展</p></blockquote><p>池的大的大小如何去设置！<br>了解：IO密集型，CPU密集型：（调优）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程进阶-JUC并发编程（1）</title>
      <link href="/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-1/"/>
      <url>/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-1/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程进阶-JUC并发编程（1）"><a href="#多线程进阶-JUC并发编程（1）" class="headerlink" title="多线程进阶-JUC并发编程（1）"></a>多线程进阶-JUC并发编程（1）</h1><h2 id="1、什么是JUC"><a href="#1、什么是JUC" class="headerlink" title="1、什么是JUC"></a>1、什么是JUC</h2><p>​        在 Java 5.0 提供了 java.util.concurrent （简称JUC ）包,在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/juc.png" alt=""></p><h2 id="2、线程和进程"><a href="#2、线程和进程" class="headerlink" title="2、线程和进程"></a>2、线程和进程</h2><h3 id="2-1-进程"><a href="#2-1-进程" class="headerlink" title="2.1 进程"></a>2.1 进程</h3><p>进程：一个程序，qq.exe , Music.exe  程序的集合。<br> 一个进程往往可以包含多个线程，至少包含一个！</p><p> Java默认有几个线程?</p><p> 2 个   mian、GC</p><h3 id="2-2-线程"><a href="#2-2-线程" class="headerlink" title="2.2 线程"></a>2.2 线程</h3><p>线程：开了一个进程 Typora，写字，自动保存（线程负责的） </p><p>对于Java而言：Thread、Runnable、Callable </p><p>Java 真的可以开启线程吗？ </p><p>开不了</p><blockquote><p>下面是Thread类的start()方法的源码（我们开启线程的方式new Thread().start()）</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * This method is not invoked for the main method thread or "system"     * group threads created/set up by the VM. Any new functionality added     * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state "NEW".     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Notify the group that this thread is about to be started     * so that it can be added to the group's list of threads     * and the group's unstarted count can be decremented. */</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* do nothing. If start0 threw a Throwable then              it will be passed up the call stack */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// native 为本地方法，他调用了底层的C++去开启线程</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java是运行在虚拟机上的，无法操控硬件。</p><h3 id="2-3-并发与并行"><a href="#2-3-并发与并行" class="headerlink" title="2.3 并发与并行"></a>2.3 并发与并行</h3><p>并发（多线程操作同一个资源）</p><ul><li>CPU 一核 ，模拟出来多条线程（多个人一起行走）</li></ul><p>并行（多个人一起行走）</p><ul><li>CPU 多核 ，多个线程可以同时执行； 线程池</li></ul><p>并发编程的本质：充分利用CPU的资源 </p><h3 id="2-4-线程有几个状态"><a href="#2-4-线程有几个状态" class="headerlink" title="2.4 线程有几个状态"></a>2.4 线程有几个状态</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建     */</span>    NEW<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 运行     */</span>    RUNNABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 阻塞     */</span>    BLOCKED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 等待     */</span>    WAITING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 超时等待     */</span>    TIMED_WAITING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 终止     */</span>    TERMINATED<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-wait-sleep-的区别"><a href="#2-5-wait-sleep-的区别" class="headerlink" title="2.5 wait /sleep 的区别"></a>2.5 wait /sleep 的区别</h3><ol><li><p>来自不同的类</p><p>wait =&gt; Object</p><p>sleep =&gt; Thread </p></li></ol><ol start="2"><li><p>关于锁的释放 </p><p>wait 会释放锁，sleep 睡觉了，抱着锁睡觉，不会释放！</p></li></ol><ol start="3"><li><p>使用的范围是不同的 </p><p>wait 必须使用在同步代码块中</p><p>sleep 可以再任何地方睡 </p></li></ol><h2 id="3、-Lock锁"><a href="#3、-Lock锁" class="headerlink" title="3、 Lock锁"></a>3、 Lock锁</h2><h3 id="3-1传统的synchronized锁"><a href="#3-1传统的synchronized锁" class="headerlink" title="3.1传统的synchronized锁"></a>3.1传统的synchronized锁</h3><blockquote><p>下列代码模拟了一个买票业务</p><ul><li>Ticket ：资源类，业务中多线程去操作的资源类</li><li>main： 开启三个线程，采用了lambdom表达式的方法创建了三个线程 A B C</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 买票问题，初步展示synchronized版的多线程问题 * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicket</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>number<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span>票<span class="token punctuation">,</span>剩余：" <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是不加上synchronized执行的结果可以看出在没有锁的情况下，多个线程同时对统一资源进行操作造成的结果混乱。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/result.png" alt=""></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 买票问题，初步展示JUC版的多线程问题 (lock版本) (JUC:java.util.concurrent包) * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketdemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ticket1 ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket1</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性 方法</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加锁</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>number<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"票,剩余："</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lock三部曲 </p><ul><li><p>1、new ReentrantLock(); </p></li><li><p>2、 lock.lock(); // 加锁 </p></li><li><p>3、finally=&gt;  lock.unlock(); // 解锁</p></li></ul><h3 id="3-2synchronized和lock锁的区别"><a href="#3-2synchronized和lock锁的区别" class="headerlink" title="3.2synchronized和lock锁的区别"></a>3.2synchronized和lock锁的区别</h3><ul><li>1、Synchronized   内置的Java关键字，  Lock 是一个Java类*</li><li>2、Synchronized  无法判断获取锁的状态，Lock  可以判断是否获取到了锁</li><li>3、Synchronized  会自动释放锁，lock 必须要手动释放锁！如果不释放锁，死锁 </li><li>4、Synchronized   线程 1（获得锁，阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下 去；</li><li>5、Synchronized    可重入锁，不可以中断的，非公平；Lock ，可重入锁，可以 判断锁，非公平（可以 自己设置）；</li><li>6、Synchronized     适合锁少量的代码同步问题，Lock  适合锁大量的同步代码！  </li></ul><blockquote><p>锁是什么，如何判断锁的是谁！</p></blockquote><h2 id="4、生产者和消费者问题"><a href="#4、生产者和消费者问题" class="headerlink" title="4、生产者和消费者问题"></a>4、生产者和消费者问题</h2><blockquote><p>生产者和消费者问题 Synchronized版</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程之间的通信问题：生产者和消费者问题！ 等待唤醒，通知唤醒。 * 线程交替执行， A B 同事操作一个变量 NUM = 0 * A num + 1 * B num - 1 * * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行add()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行dec()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">dec</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行add()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行dec()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">dec</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"D"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//资源类 通用：等待，业务，通知</span><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，加一完毕了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">dec</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，减一完毕了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可能存在的问题：ABCD四个线程同时存在可能会产生虚假唤醒.</p><p>解决方案： 将判断业务逻辑的if改为while.</p></blockquote><blockquote><p>juc版本的生产者消费者问题</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data2 data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data2</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行add()操作："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data2<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行dec()操作："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data2<span class="token punctuation">.</span><span class="token function">dec</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span> <span class="token punctuation">(</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//等待</span>                condition<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知其他线程，加一完毕了</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">dec</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//等待</span>                condition<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知其他线程，减一完毕了</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何一个新的技术，绝对不是仅仅只是覆盖了原来的技术，优势和补充！</p><blockquote><p>Condition 精准的通知和唤醒线程 </p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data3 data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data3</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data3<span class="token punctuation">.</span><span class="token function">printA</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data3<span class="token punctuation">.</span><span class="token function">printB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data3<span class="token punctuation">.</span><span class="token function">printC</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1A 2B 3C</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务 判断 执行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=> A"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务 判断 执行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=> B"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务 判断 执行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=> C"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/02/21/sui-bi/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2020/02/21/sui-bi/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一个博客"><a href="#我的第一个博客" class="headerlink" title="我的第一个博客"></a>我的第一个博客</h2><p>​    经过两天的学习东拼西凑，我的博客总算建成了，希望在接下来的日子里，能够坚持记录学习技术的过程，记录自己的感想，对源码的理解。希望在将来回头来再看学习的经过的时候，能够对技术有更深一步的理解。</p><p>关于博客的建设，以后一边写博客一边优化吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/20/hello-world/"/>
      <url>/2020/02/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
