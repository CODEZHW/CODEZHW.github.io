<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>经典的垃圾收集器</title>
      <link href="/2020/03/21/jvm/jing-dian-de-la-ji-shou-ji-qi/"/>
      <url>/2020/03/21/jvm/jing-dian-de-la-ji-shou-ji-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="经典的垃圾收集器"><a href="#经典的垃圾收集器" class="headerlink" title="经典的垃圾收集器"></a>经典的垃圾收集器</h1><blockquote><p><strong>如果说收集算法是内存回收的方法论，那垃圾收集器就是内存回收的实践者。</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200318165553.png" alt=""></p><p><strong>图展示了七种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。</strong></p><p><strong>在JDK8中将<code>Serial+CMS</code>、<code>MSC+ParNew</code>这两种组合废弃，在JDK9中彻底取消。</strong></p><p><strong>图中收集器所处的区域，则表示它是属于新生代收集器抑或是老年代收集器。</strong></p><p><strong>接下来将逐一介绍这些收集器的目标、特性、原理和使用场景，并重点分析CMS和G1这两款相对复杂而又广泛使用的收集器，深入了解它们的部分运作细节。</strong></p><h2 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h2><p>Serial收集器是最基础、历史最悠久的收集器，从名字可以猜出，这个收集器是一个单线程工作的收集器，但它的<code>单线程</code>的意义并不仅仅是说明它只会使用一个处理器或一条收集线程去完成垃圾收集工作，更重要的是强调在它进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。</p><p>这样的作法看上去不可理喻，但实际上它依然是HotSpot虚拟机运行在客户端模式下的<code>默认新生代收集器</code>，有着优于其他收集器的地方，那就是简单而高效。</p><p>对于单核处理器或处理器核心数较少的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</p><p><strong>在用户桌面的应用场景以及近年来流行的部分微服务应用中，分配给虚拟机管理的内存一般来说并不会特别大，收集几十兆甚至一两百兆的新生代（仅仅是指新生代使用的内存，桌面应用甚少超过这个容量），垃圾收集的停顿时间完全可以控制在十几、几十毫秒，最多一百多毫秒以内，只要不是频繁发生收集，这点停顿时间对许多用户来说是完全可以接受的。</strong></p><p>所以，Serial收集器对于运行在客户端模式下的虚拟机来说是一个很好的选择。</p><h2 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h2><p>ParNew收集器实质上是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为包括Serial收集器可用的所有控制参数、收集算法、Stop TheWorld、对象分配规则、回收策略等都与Serial收集器完全一致，在实现上这两种收集器也共用了相当多的代码。</p><p>ParNew收集器除了支持多线程并行收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是不少运行在服务端模式下的HotSpot虚拟机，尤其是JDK 7之前的遗留系统中首选的新生代收集器，其中有一个与功能、性能无关但其实很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。</p><h2 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h2><p>Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器……Parallel Scavenge的诸多特性从表面上看和ParNew非常相似，那它有什么特别之处呢？</p><p>Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是处理器用于<strong>运行用户代码的时间与处理器总消耗时间的比值。</strong><br>$$<br>吞吐量 = 运行用户代码时间 / （运行用户代码时间 + 运行垃圾收集时间）<br>$$</p><h2 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h2><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。这个收集器的主要意义也是供客户端模式下的HotSpot虚拟机使用。如果在服务端模式下，它也可能有两种用途：一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用，另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent ModeFailure时使用。这两点都将在后面的内容中继续讲解。</p><h2 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h2><p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。这个收集器是直到JDK 6时才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于相当尴尬的状态，原因是如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old（PS MarkSweep）收集器以外别无选择，其他表现良好的老年代收集器，如CMS无法与它配合工作。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用ParallelScavenge收集器也未必能在整体上获得吞吐量最大化的效果。同样，由于单线程的老年代收集中无法充分利用服务器多处理器的并行处理能力，在老年代内存空间很大而且硬件规格比较高级的运行环境中，这种组合的总吞吐量甚至不一定比ParNew加CMS的组合来得优秀。</p><p>直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的搭配组合，在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合。</p><h2 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h2><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网网站或者基于浏览器的B/S系统的服务端上，这类应用通常都会较为关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验。CMS收集器就非常符合这类应用的需求。</p><p>上就可以看出CMS收集器是基于标记-清除算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为四个步骤，包括：</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的文件结构</title>
      <link href="/2020/03/21/jvm/lei-wen-jian-jie-gou/"/>
      <url>/2020/03/21/jvm/lei-wen-jian-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="类的文件结构"><a href="#类的文件结构" class="headerlink" title="类的文件结构"></a>类的文件结构</h1><p>我们都知道Java的优点特性：<strong>可移植性</strong>。</p><p>Java程序在诞生之初的宣传口号： <code>一次编写，到处运行</code>。希望能够冲破操作系统平台的束缚，因为各种不同的软件结构体系，各种不同的操作系统，所以<code>平台无关性</code>理想实现只能在操作系统以上的应用层。</p><p>这就有了Java虚拟机，这些虚拟机可以载入和执行同一种<code>平台无关</code>、<code>语言无关</code>的字节码文件，从而实现一次编写，到处运行。</p><p>各种不同平台的Java虚拟机，以及所有平台都统一支持的程序存储格式——<code>字节码（ByteCode）</code>是构成平台无关性的基石。</p><p>Java虚拟机不与包括Java语言在内的任何程序语言绑定，它只与<code>Class文件</code>这种特定的二进制文件格式所关联。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200320171324.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题：第二周</title>
      <link href="/2020/03/21/leetcode/di-er-zhou/"/>
      <url>/2020/03/21/leetcode/di-er-zhou/</url>
      
        <content type="html"><![CDATA[<h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><h2 id="题目：482-密钥格式化"><a href="#题目：482-密钥格式化" class="headerlink" title="题目：482. 密钥格式化"></a>题目：<a href="https://leetcode-cn.com/problems/license-key-formatting/" target="_blank" rel="noopener">482. 密钥格式化</a></h2><p>给定一个密钥字符串S，只包含字母，数字以及 ‘-‘（破折号）。N 个 ‘-‘ 将字符串分成了 N+1 组。给定一个数字 K，重新格式化字符串，除了第一个分组以外，每个分组要包含 K 个字符，第一个分组至少要包含 1 个字符。两个分组之间用 ‘-‘（破折号）隔开，并且将所有的小写字母转换为大写字母。</p><p>给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。</p><p><strong>示例 1：</strong></p><pre><code>输入：S = &quot;5F3Z-2e-9-w&quot;, K = 4输出：&quot;5F3Z-2E9W&quot;解释：字符串 S 被分成了两个部分，每部分 4 个字符；     注意，两个额外的破折号需要删掉。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：S = &quot;2-5g-3-J&quot;, K = 2输出：&quot;2-5G-3J&quot;解释：字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。</code></pre><p><strong>解题思路：</strong></p><ul><li><p>将字符串转化为字符数组，并全部变为大写。</p></li><li><p>从后往前遍历，在头部插入元素。</p></li><li><p>定义一个计数器count 记录插入的元素个数，当元素个数 % K==0的时候插入一个’-‘。</p></li></ul><p><strong>代码</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//482. 密钥格式化</span>    <span class="token keyword">public</span> String <span class="token function">licenseKeyFormatting</span> <span class="token punctuation">(</span> String S<span class="token punctuation">,</span> <span class="token keyword">int</span> K <span class="token punctuation">)</span> <span class="token punctuation">{</span>        String replace <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">replace</span> <span class="token punctuation">(</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> replace<span class="token punctuation">.</span><span class="token function">toCharArray</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">insert</span> <span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> K <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">insert</span> <span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"-"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：202-快乐数"><a href="#题目：202-快乐数" class="headerlink" title="题目：202. 快乐数"></a>题目：<a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></h2><p>编写一个算法来判断一个数是不是“快乐数”。</p><p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><p>示例: </p><p>输入: 19<br>输出: true<br>解释:<br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1</p><p><strong>解题思路：</strong></p><ul><li>根据题意可能会无线循环，所以我们优先判断为false的情况。</li><li>因为题目找的就是hash表的，通过观察可以发现，如果两个数的合在之前出现过那么就会陷入死循环。</li><li>通过判断这个结果是否在之前出现可以提前结束循环，利用HashSet去判断是否出现重复。</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashSet <span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token function">change</span> <span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span> <span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        set<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">change</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span> <span class="token punctuation">(</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：9-回文数"><a href="#题目：9-回文数" class="headerlink" title="题目：9. 回文数"></a>题目：<a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">9. 回文数</a></h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><p>输入: 121<br>输出: true<br>示例 2:</p><p>输入: -121<br>输出: false<br>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。<br>示例 3:</p><p>输入: 10<br>输出: false<br>解释: 从右向左读, 为 01 。因此它不是一个回文数。</p><p><strong>解题思路：</strong></p><ul><li>首先负数的回文一定不想当，所以直接false。</li><li>然后正常操作</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span> <span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">+=</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span> <span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        len<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num <span class="token operator">==</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的垃圾收集</title>
      <link href="/2020/03/18/jvm/java-de-la-ji-shou-ji/"/>
      <url>/2020/03/18/jvm/java-de-la-ji-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的垃圾收集"><a href="#Java的垃圾收集" class="headerlink" title="Java的垃圾收集"></a>Java的垃圾收集</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早在Java诞生之前，就有了第一门内存动态分配和垃圾收集的语言Lisp。</p><p>垃圾收集（Garbage Collection）无非从三个角度去考虑。</p><ul><li><strong>哪些内存需要回收？</strong></li><li><strong>什么时候回收？</strong></li><li><strong>如何回收？</strong></li></ul><p>先如今的内存动态分配与垃圾收集的计数已经相当成熟，为什么我们还要去了解垃圾回收的机制呢？</p><p>答案是：<code>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。</code></p><ul><li><strong>哪些内存需要回收？</strong></li></ul><p>我们都知道在Java内存运行时<code>程序计数器、虚拟机栈、本地方法栈</code>是线程私有的，随线程而生，随线程结束而灭。</p><p>虚拟机栈中主要存放的局部变量表基本上对象创建过程中的<code>类加载机制检测</code>中确定下来。所以这部分的内存确定与收回都是具备确定性的。当方法结束或者线程结束，内存自然而然的回收了。</p><p>而<code>Java堆和方法区</code>这两个区域则有着很显著的不确定性：一个对象的实例数据只有处于运行时期，我们才能够知道占用了多少内存，所以这部分的内存分配与回收是动态的。</p><ul><li><strong>什么时候回收？</strong></li></ul><p>理想的认为对象<code>消亡</code>就回收，对象<code>存活</code>就不回收呗。</p><p><strong>那怎么去确定对象的存活与消亡呢？</strong></p><h2 id="判断对象存活的两大算法："><a href="#判断对象存活的两大算法：" class="headerlink" title="判断对象存活的两大算法："></a>判断对象存活的两大算法：</h2><p>判断对象存活的两大算法：</p><p>​    1.引用计数算法</p><p>​    2.可达性分析算法</p><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>引用分析算法的主要思想：<code>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</code></p><p>引用分析算法优缺点很明显：</p><p>​    优点：它的算法简单，因此效率很高，在很多领域都有应用。</p><p>​    缺点：算法过于简单，无法处理复杂的情况，假设有两个对象他们互相持有对方的引用，除此之外再无其他引用，这样会导致他们的引用计数器永远不为0，所以他们无法被回收。</p><p>我们用Java实现这个例子来看一下Java会不会回收这两个对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1mb <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1mb<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo1 demo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo1</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo1 demo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo1</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        demo1<span class="token punctuation">.</span>instance <span class="token operator">=</span> demo2<span class="token punctuation">;</span>        demo2<span class="token punctuation">.</span>instance <span class="token operator">=</span> demo1<span class="token punctuation">;</span>        demo1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        demo2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo1<span class="token punctuation">.</span><span class="token function">testGc</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="C:%5CUsers%5CUSERzhw%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200318141816294.png" alt="image-20200318141816294"></p><p>可以看到对象依然被回收了，这也侧面证明了我们<code>Java虚拟机并不是通过引用计数器去判断对象是否消亡</code>。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析算法来判定对象是否存活的。这个算法的基本思路就是通过一系列称为<code>“GC Roots”的根对象作为起始节点集</code>，<strong>从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”，如果某个对象到GCRoots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200318143148.png" alt=""></p><p>在这里例子中：<strong>对象OBJ5、OBJ6、OBJ7仍然具有引用关系，但是它们到GC ROOT是不可达的，所以它们是可回收对象，同理OBJ1.OBJ2.OBJ3是可达的，所以它们是不可回收对象</strong></p><p><strong>固定的几种GCROOT：</strong></p><ul><li>虚拟机栈中（局部变量表中）的引用对象</li><li>方法区中类静态属性应用对象</li><li>方法区中常量引用对象</li><li>本地方法中Native方法引用的对象</li><li>同步锁的持有对象</li></ul><p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，目前最新的几款垃圾收集器无一例外都具备了局部回收的特征，为了避免GC Roots包含过多对象而过度膨胀，它们在实现上也做出了各种优化处理。</p><h2 id="四大引用"><a href="#四大引用" class="headerlink" title="四大引用"></a>四大引用</h2><p>上述的两种算法，判断对象的存活与否都离不开—-<code>引用</code>.</p><p>在JDK1.2以前引用的定义都是很传统的：如果reference类型的数据中存储的是另一个内存区域的起始地址，那么就称这个reference数据表示某个对象或内存的引用。</p><p>这样的定义没有什么问题，但是我们并不希望引用只有两种状态<code>被引用</code>和<code>未被引用</code>。</p><p>在JDK1.2改版之后,Java将引用的概念进行了扩充将其按照强弱顺序分为了四大引用。</p><ul><li><strong>强引用 : 是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</strong></li><li><strong>软引用 ：一些还有用，但非必须的对象。在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</strong></li><li><strong>弱引用 ：被弱引用关联的对象只能生存到下一次垃圾收集发生为止。</strong></li><li><strong>虚引用 : 一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。</strong></li></ul><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p><strong>垃圾收集算法</strong></p><p>从判定对象是否消亡的角度出发，垃圾收集算法也分为两类：</p><ol><li><strong>引用计数式垃圾收集</strong></li><li><strong>追踪式垃圾收集</strong></li></ol><p>由于引用计数式垃圾收集算法在主流虚拟机中很少使用，所以讨论追踪式垃圾收集。</p><p><strong>分代收集理论</strong></p><p>当前商业虚拟机的垃圾收集器，大多数都遵循了“分代收集”的理论进行设计。</p><p>这个理论建立在两个分代假说之上：</p><ol><li><strong>弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的</strong></li><li><strong>强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。</strong></li></ol><p>这两个分代假说共同奠定了多款常用的垃圾收集器的一致的设计原则：<strong>收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。</strong>显而易见，<code>如果一个区域中大多数对象都是朝生夕灭，难以熬过垃圾收集过程的话，那么把它们集中放在一起，每次回收时只关注如何保留少量存活而不是去标记那些大量将要被回收的对象</code>，就能以较低代价回收到大量的空间；如<code>果剩下的都是难以消亡的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用</code>。</p><p>因而才有了<code>Minor GC</code>、<code>Major GC</code>、<code>Full GC</code>这样的回收类型的划分。也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了<code>标记-复制算法</code>、<code>标记-清除算法</code>和<code>标记-整理算法</code>等针对性的垃圾收集算法。</p><p>一般情况下会Java堆中划分为<code>新生代（Young Generation）</code>和<code>老年代（Old Generation）</code></p><p>针对不同分代的类似名词：</p><ul><li>部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<ul><li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li><li>年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。</li><li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。</li></ul></li><li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li></ul><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法，在1960年由Lisp之父John McCarthy所提出。</p><p>如它的名字一样，算法分为<code>标记</code>和<code>清除</code>两个阶段：<strong>首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。</strong></p><p>之所以说它是最基础的收集算法，是因为后续的收集算法大多都是以标记-清除算法为基础，对其缺点进行改进而得到的。</p><p>主要的两个缺点：</p><ul><li><strong>第一个是执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低。</strong></li><li><strong>内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200318205839.png" alt="标记-清除算法"></p><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p>标记-复制算法常被简称为复制算法。</p><p>为了解决标记-清除算法面对大量可回收对象时执行效率低的问题，<strong>标记-复制算法将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</strong></p><p>如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销，但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象，而且每次都是针对整个半区进行内存回收，分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可。</p><p>这样实现简单，运行高效，不过其缺陷也显而易见，这种复制回收算法的代价是将可用内存缩小为了原来的一半，空间浪费未免太多了一点。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200318210421.png" alt="标记-复制算法"></p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>标记-复制算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p><p>标记-整理”（Mark-Compact）算法，<strong>其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</strong></p><p>标记-清除算法与标记-整理算法的本质差异在于前者是<code>一种非移动式的回收算法，而后者是移动式的</code>。是否移动回收后的存活对象是一项优缺点并存的风险决策：</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200318210816.png" alt="标记-整理算法"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串与Integer缓存</title>
      <link href="/2020/03/17/java/java-zi-fu-chuan-yu-integer-huan-cun/"/>
      <url>/2020/03/17/java/java-zi-fu-chuan-yu-integer-huan-cun/</url>
      
        <content type="html"><![CDATA[<h1 id="Java字符串"><a href="#Java字符串" class="headerlink" title="Java字符串"></a>Java字符串</h1><ul><li>S1==S2和S1.equals(S2)有什么区别吗？</li></ul><p>我们都知道在Java语义中，<code>==</code>判断的对象的内存地址是否相等。（暂时不去探究JVM怎么解析==这个语法的以及JVM怎么把“”之间的内容解析成字符串）</p><p>那现在问题来了：</p><pre class="line-numbers language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span> <span class="token string">"123"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span> <span class="token string">"123"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>var s3 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>var s4 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"s1: 内存地址 => "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span> <span class="token punctuation">(</span> s1 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  s1: 内存地址 => "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span> <span class="token punctuation">(</span> s2 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  s1 == s2 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"s3: 内存地址 => "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span> <span class="token punctuation">(</span> s3 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  s4: 内存地址 => "</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span> <span class="token punctuation">(</span> s4 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  s3 == s4 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们不能通过s.hashcode()方法得到对象的内存地址，因为String重写了这个方法，它返回对象的hash值。</strong></p><p>你觉得结果会是怎样呢？</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://gitee.com//CODEZHW/blogimage/raw/master/img/20200317205955.png" alt="结果"></p><p>很容易验证我们心中所想：</p><ul><li><strong>s1 != s2 因为他们是通过new关键字创建出来的，存储在Java堆中对象的内存地址不相等。</strong></li><li><strong>s3 == s3 因为JVM解析“”将里面的内容存放在字符串常量池中，因为是同一个字符串位于常量池中，所以他们的引用相同，内存地址也就相同</strong></li></ul><p><strong>Java在JDK1.7之后将字符串常量池放入堆中。</strong></p><h1 id="Integer缓存"><a href="#Integer缓存" class="headerlink" title="Integer缓存"></a>Integer缓存</h1><pre class="line-numbers language-java"><code class="language-java">Integer integer1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Integer integer2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span>integer1 <span class="token operator">==</span> integer2 <span class="token punctuation">)</span><span class="token punctuation">;</span>Integer integer3 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>Integer integer4 <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span>integer3 <span class="token operator">==</span> integer4 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：true</p><p>​     false</p><p>Integer integer1 = 1;</p><p>会通过自动装箱的机制：</p><p>Integer integer1 = 1; 相当于 Integer integer1 = Integer.valueOf(1);</p><p>我们来看valueOf()的源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当i的范围在i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.hig之间时，会在</p><p>IntegerCache.cache[]数组中去寻找。</p><p>IntegerCache.low = -128；</p><p>IntegerCache.hig = +127；</p><p>cache[]中存储的也是-128~+127</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//IntegerCache 静态代码块中的一段 high = 127 low = -128</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Use the archived cache if it exists and is large enough</span><span class="token keyword">if</span> <span class="token punctuation">(</span>archivedCache <span class="token operator">==</span> null <span class="token operator">||</span> size <span class="token operator">></span> archivedCache<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    archivedCache <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>cache <span class="token operator">=</span> archivedCache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，当Integer对象的值在-128~+127之间，它不会创建对象会从Integer缓存中提取。当Integer超过这个范围时会直接创建对象。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx介绍与安装</title>
      <link href="/2020/03/15/nginx/nginx-jie-shao-yu-an-zhuang/"/>
      <url>/2020/03/15/nginx/nginx-jie-shao-yu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx介绍与安装"><a href="#Nginx介绍与安装" class="headerlink" title="Nginx介绍与安装"></a>Nginx介绍与安装</h1><h2 id="Nginx的介绍"><a href="#Nginx的介绍" class="headerlink" title="Nginx的介绍"></a>Nginx的介绍</h2><ul><li><strong>什么是Nginx</strong></li></ul><p><strong>Nginx是一个http服务器。是一个使用c语言开发的高性能的http服务器及反向代理服务器。Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</strong></p><ul><li><strong>Nginx的应用场景</strong></li></ul><ol><li>HTTP服务器，Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。（这也正是我所需要的）</li><li>反向代理，就是客户访问服务器的时候，不直接访问我们的服务器而是经过一个代理服务器，去访问我们的服务器。从客户端的角度，客户不知道我服务器的信息，是通过代理服务器去进行访问。<code>隐藏了我们的服务器，正向代理隐藏了我们的客户端。</code></li><li>负载均衡，一句话：nginx会给你分配服务器压力小的去访问，对于我来说用不上。</li></ol><ul><li><p>Nginx与Tomcat和Apache的区别</p><p>1.相同点：都是web服务器，严格来说apache和nginx叫做http server,tomcat是application server。</p><p>2.tomcat是一个轻量级的web服务器，作为Java应用的容（jsp,servlet），可以处理动态资源和静态资源，在高并发环境下处理能力有限，并发处理不如nginx。所以可以tomcat和nginx结合使用，tomcat处理动态资源，nginx处理静态资源，并负责并发处理。</p><p>3.nignx相较于apache更加轻量，内存占用更少，但稳定性不如apache，不能处理动态资源。</p></li></ul><h2 id="阿里云centos7安装nginx"><a href="#阿里云centos7安装nginx" class="headerlink" title="阿里云centos7安装nginx"></a>阿里云centos7安装nginx</h2><ul><li><p><strong>1.安装依赖</strong></p><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc zlib zlib-devel pcre-devel openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    </p><ul><li><strong>2.下载并解压nginx</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入local目录</span><span class="token function">cd</span> /usr/local<span class="token comment" spellcheck="true"># 下载1.16版本的ngxin 可以自己去选择版本</span><span class="token function">wget</span> http://nginx.org/download/nginx-1.16.0.tar.gz<span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> -xzf nginx-1.16.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就会在<code>/usr/local/</code> 目录下看到这两个文件</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/15/NeFWaH9m6UMVTJx.jpg" alt=""></p><ul><li><strong>3.安装nginx</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入解压的目录</span><span class="token function">cd</span> /usr/local/nginx-1.16.0<span class="token comment" spellcheck="true"># 执行配置文件</span>./configure<span class="token comment" spellcheck="true"># 编译并安装（nginx是C语言写的）</span><span class="token function">make</span><span class="token function">make</span> install<span class="token punctuation">(</span>或者make <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> install<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  安装成功以后再<code>/usr/local/</code>目录下会生成一个nginx文件</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/15/eplGjozFk8RLXTU.jpg" alt=""></p><p>进入nginx目录会看到</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/15/lEBuCed7nr1OcHN.jpg" alt=""></p><ul><li><strong>4.启动nginx</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 进入nginx目录</span><span class="token function">cd</span> /usr/local/nginx/sbin<span class="token comment" spellcheck="true"># 启动</span>./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>5.查看是否启动成功</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看nginx进程</span><span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> nginx<span class="token comment" spellcheck="true"># 关闭nginx(在sbin目录下 也可以将其加入环境变量)</span>./nginx -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/15/JSe6mEcBW87lrfY.jpg" alt=""></p><ul><li><strong>6.排错以及查看结果</strong></li></ul><blockquote><p><strong>nginx进程正常启动网页打不开问题</strong></p></blockquote><p>nginx默认端口是：<code>80</code></p><p>通过指令：<code>firewall-cmd --list-all</code>查看防火墙80端口是否打开，阿里云服务器开发80端口的安全组。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/15/lSfwo5qQ2dXyGbz.jpg" alt=""></p><p>最后通过服务器公网IP或者虚拟机IP地址就可以访问到我们的nginx网页了。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/15/8TIJulhE1Wiy43t.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题:第一周</title>
      <link href="/2020/03/13/leetcode/di-yi-zhou/"/>
      <url>/2020/03/13/leetcode/di-yi-zhou/</url>
      
        <content type="html"><![CDATA[<h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><h2 id="题目：121-买卖股票的最佳时机"><a href="#题目：121-买卖股票的最佳时机" class="headerlink" title="题目：121. 买卖股票的最佳时机"></a>题目：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. 买卖股票的最佳时机</a></h2><p><strong>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</strong></p><p><strong>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</strong></p><p><strong>注意你不能在买入股票前卖出股票。</strong></p><p>示例 1:</p><pre class="line-numbers language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>7,1,5,3,6,4<span class="token punctuation">]</span>输出: 5解释: 在第 2 天（股票价格 <span class="token operator">=</span> 1）的时候买入，在第 5 天（股票价格 <span class="token operator">=</span> 6）的时候卖出，最大利润 <span class="token operator">=</span> 6-1 <span class="token operator">=</span> 5 。注意利润不能是 7-1 <span class="token operator">=</span> 6, 因为卖出价格需要大于买入价格。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例 2:</p><pre class="line-numbers language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>7,6,4,3,1<span class="token punctuation">]</span>输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>解题思路：</strong></p><ul><li>第一种：暴力<ul><li>直接双重循环遍历数组，找出在j&gt;i情况下 price[j]-price[i]的最大值。</li><li>效率很低 O(n^2)</li></ul></li><li>第二种：一次遍历<ul><li>维护两个值，一个是当前股票的价格  <code>currpri = prices[0]</code>，当前最大利润 <code>pro = 0</code>;</li><li>遍历数组中的每支股票，判断它是否小于当前股票，如果是买入；不是，则计算卖出当前股票得到的利润</li><li>然后与当前利润进行比较</li></ul></li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法一</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> max <span class="token operator">&lt;</span>  prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> max<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//方法二</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> prices <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> pro <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> currPri <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currPri <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            currPri <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tempPro <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> currPri<span class="token punctuation">;</span>            pro <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span> <span class="token punctuation">(</span> tempPro<span class="token punctuation">,</span> pro <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pro<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：-206-反转链表"><a href="#题目：-206-反转链表" class="headerlink" title="题目： 206. 反转链表"></a>题目： <a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></h2><p><strong>反转一个单链表。</strong></p><p><strong>示例:</strong></p><pre class="line-numbers language-bash"><code class="language-bash">输入: 1-<span class="token operator">></span>2-<span class="token operator">></span>3-<span class="token operator">></span>4-<span class="token operator">></span>5-<span class="token operator">></span>NULL输出: 5-<span class="token operator">></span>4-<span class="token operator">></span>3-<span class="token operator">></span>2-<span class="token operator">></span>1-<span class="token operator">></span>NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解题思路：</strong></p><ul><li>双指针的方法，因为要进行节点切换，所以要定义三个变量</li><li>pre = tmp  指向null ，cur = head;cur和pre同时移动，移动到最后pre就是头节点。</li><li>循环条件 cur !=null; 双指针后移，tmp记录cur的下一个节点tmp = cur.next;</li><li>断开cur-&gt;next,将cur指向pre</li><li>将pre-&gt;cur，将pre指向cur</li><li>cur-&gt;tmp,将cur指向tmp</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseList</span> <span class="token punctuation">(</span> ListNode head <span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>    ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode tmp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：面试题-01-06-字符串压缩"><a href="#题目：面试题-01-06-字符串压缩" class="headerlink" title="题目：面试题 01.06. 字符串压缩"></a>题目：<a href="https://leetcode-cn.com/problems/compress-string-lcci/" target="_blank" rel="noopener">面试题 01.06. 字符串压缩</a></h2><p><strong>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</strong></p><p><strong>示例1:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"> 输入：<span class="token string">"aabcccccaaa"</span> 输出：<span class="token string">"a2b1c5a3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例2:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"> 输入：<span class="token string">"abbccd"</span> 输出：<span class="token string">"abbccd"</span> 解释：<span class="token string">"abbccd"</span>压缩后为<span class="token string">"a1b2c2d1"</span>，比原字符串长度更长。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>解题思路：</strong></p><ul><li>双指针 维护两个变量i,j 初始:i=j; 并将字符串S转化为字符数组chars去遍历 。</li><li>如果chars[i] == [j]; j++; 如果不相等；字符串添加 chars[i]和j-i;然后赋值i=j。</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">compressString</span> <span class="token punctuation">(</span> String S <span class="token punctuation">)</span> <span class="token punctuation">{</span>    StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">toCharArray</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> j<span class="token operator">-</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">>=</span> S<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">?</span> S <span class="token operator">:</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：169-多数元素"><a href="#题目：169-多数元素" class="headerlink" title="题目：169. 多数元素"></a>题目：<a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">169. 多数元素</a></h2><p><strong>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</strong></p><p><strong>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</strong></p><p>示例 1:</p><p>输入: [3,2,3]<br>输出: 3<br>示例 2:</p><p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p><p><strong>解题思路：</strong></p><ul><li>解法一：<ul><li>维护两个值一个记录当前最大元素res,一个记录当前元素的最大值。</li><li>利用HashMap的特点，将数组的每个元素作为key, 元素出现次数作为value</li><li>因为给定的数组总是存在多数元素，所以如果当前元素出现次数大于nums.length/2 返回当前元素</li></ul></li></ul><p><strong>代码:</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//169. 多数元素</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token punctuation">)</span> <span class="token punctuation">{</span>    HashMap <span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span> <span class="token punctuation">(</span> num<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span> <span class="token punctuation">(</span> num<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span> <span class="token operator">></span> nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：面试题40-最小的k个数"><a href="#题目：面试题40-最小的k个数" class="headerlink" title="题目：面试题40. 最小的k个数"></a>题目：<a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/" target="_blank" rel="noopener">面试题40. 最小的k个数</a></h2><p><strong>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</strong></p><p><strong>示例 1：</strong></p><p>输入：arr = [3,2,1], k = 2<br>输出：[1,2] 或者 [2,1]<br><strong>示例 2：</strong></p><p>输入：arr = [0,1,2,1], k = 1<br>输出：[0]</p><p><strong>解题思路：</strong></p><ul><li>快速排序，然后输出前K个数</li><li>Arrays.sort()方法就是快速排序</li><li>时间效率：O(nlogn)</li><li>可以对快速排序进行改进，在找到K个最小的数时停止之后其他数的排序。</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLeastNumbers</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//调库</span>    Arrays<span class="token punctuation">.</span><span class="token function">sort</span> <span class="token punctuation">(</span> arr <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span> <span class="token punctuation">(</span> arr<span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//手写快排 这和上面那种一样</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span> <span class="token punctuation">(</span> arr<span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quicksort</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">></span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> high<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基准</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">quicksort</span> <span class="token punctuation">(</span> arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quicksort</span> <span class="token punctuation">(</span> arr<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：1160-拼写单词"><a href="#题目：1160-拼写单词" class="headerlink" title="题目：1160. 拼写单词"></a>题目：<a href="https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters/" target="_blank" rel="noopener">1160. 拼写单词</a></h2><p><strong>给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。</strong></p><p><strong>假如你可以用 chars 中的『字母』（字符）拼写出 words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。</strong></p><p><strong>注意：每次拼写时，chars 中的每个字母都只能用一次。</strong></p><p><strong>返回词汇表 words 中你掌握的所有单词的 长度之和。</strong></p><p><strong>示例 1：</strong></p><p>输入：words = [“cat”,”bt”,”hat”,”tree”], chars = “atach”<br>输出：6</p><p>解释：<br>可以形成字符串 “cat” 和 “hat”，所以答案是 3 + 3 = 6。</p><p><strong>示例 2：</strong></p><p>输入：words = [“hello”,”world”,”leetcode”], chars = “welldonehoneyr”<br>输出：10</p><p>解释：<br>可以形成字符串 “hello” 和 “world”，所以答案是 5 + 5 = 10。</p><p><strong>解题思路：</strong></p><ul><li>26个字母，我们可以用一个长度为26的数组存储。通过c[cc-‘a’]将这个字符串存入到数组中。</li><li>根据这个原理定义两个数组int [] c, int[] w;c存储判断的字符串，w存储每个单词。</li><li>通过比较w[i]是否大于c[i]，如果是，则继续循环；如果不是，则表示这个单词可以拼写，记录。</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">countCharacters</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> String chars <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> cc <span class="token operator">:</span> chars<span class="token punctuation">.</span><span class="token function">toCharArray</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cc <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ww <span class="token operator">:</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ww <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span> a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        res <span class="token operator">+=</span> word<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：面试题-01-01-判定字符是否唯一"><a href="#题目：面试题-01-01-判定字符是否唯一" class="headerlink" title="题目：面试题 01.01. 判定字符是否唯一"></a>题目：<a href="https://leetcode-cn.com/problems/is-unique-lcci/" target="_blank" rel="noopener">面试题 01.01. 判定字符是否唯一</a></h2><p><strong>实现一个算法，确定一个字符串 s 的所有字符是否全都不同。</strong></p><p><strong>示例 1：</strong></p><p>输入: s = “leetcode”<br>输出: false </p><p><strong>示例 2：</strong></p><p>输入: s = “abc”<br>输出: true<br>限制：</p><p><strong>0 &lt;= len(s) &lt;= 100</strong><br><strong>如果你不使用额外的数据结构，会很加分。</strong></p><p><strong>解题思路：</strong></p><ul><li>用String.replace()方法去替换字符串中的每个字符，然后判断他与原来的字符长度-1是否相等</li><li>在循环中建立一个astr复本，保证每次判断的字符都是传入的字符。</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//面试题 01.01. 判定字符是否唯一</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUnique</span> <span class="token punctuation">(</span> String astr <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> astr<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> astr<span class="token punctuation">;</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span> <span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span> <span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">charAt</span> <span class="token punctuation">(</span> i <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> astr<span class="token punctuation">.</span><span class="token function">length</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：836-矩形重叠"><a href="#题目：836-矩形重叠" class="headerlink" title="题目：836. 矩形重叠"></a>题目：<a href="https://leetcode-cn.com/problems/rectangle-overlap/" target="_blank" rel="noopener">836. 矩形重叠</a></h2><p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p><p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p><p>给出两个矩形，判断它们是否重叠并返回结果。</p><p><strong>示例 1：</strong></p><pre><code>输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]输出：true</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]输出：false</code></pre><p><strong>解题思路：</strong></p><p>首先如果两个矩阵重叠，那么它们在x&amp;y轴上的投影也一定重叠，从这个角度出发将二维的问题转化为两个一维的问题去解决。</p><p>假设两个矩阵rec1 = [Xs1, Xe1, Ys1, Ye1], rec2 = [Xs2, Xe2, Ys2, Ye2]</p><p>对X轴来说，去判断投影重叠的情况比较多，我们可以从投影不重叠去判断然后把结果取反也是一样的。</p><p>X不重叠： Xe1 &lt;= Xs2 || Xe2 &lt;= Xs1 </p><p>Y不重叠： Ye1 &lt;= Ys2 || Ye2 &lt;= Ys1 </p><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isRectangleOverlap</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rec1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rec2 <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rec2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> rec2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rec2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> rec2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rec1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目：409-最长回文串"><a href="#题目：409-最长回文串" class="headerlink" title="题目：409. 最长回文串"></a>题目：<a href="https://leetcode-cn.com/problems/longest-palindrome/" target="_blank" rel="noopener">409. 最长回文串</a></h2><p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p><p>在构造过程中，请注意区分大小写。比如 <code>&quot;Aa&quot;</code> 不能当做一个回文字符串。</p><p><strong>注意:</strong><br>假设字符串的长度不会超过 1010。</p><p><strong>示例 1:</strong></p><pre><code>输入:&quot;abccccdd&quot;输出:7解释:我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。</code></pre><p><strong>解题思路：</strong></p><p>做过拼写单词的题目这道题也很容易能想到，用一个长度为42（大小写）的字符数组来保存。</p><p>然后遍历数组，因为偶数是中心对称的，所以所有的偶数字符都可以组成回文串。</p><p>有几种特殊情况：</p><ul><li>没有奇数直接返回整个数组个数</li><li>只有一个奇数，返回整个数组 + 1</li><li>有多个奇数，就把每个奇数-1变成偶数，用总的 - 去掉的奇数个数再+1</li></ul><p><strong>代码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longestPalindrome</span> <span class="token punctuation">(</span> String s <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span> <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ss <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ss <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">[</span>ss <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            c<span class="token punctuation">[</span>ss <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cc <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+=</span> cc<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cc <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            odd <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> odd <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> res <span class="token operator">:</span> res <span class="token operator">-</span> odd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OutOfMemoryError异常</title>
      <link href="/2020/03/10/jvm/outofmemoryerror-yi-chang/"/>
      <url>/2020/03/10/jvm/outofmemoryerror-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="OutOfMemoryError异常"><a href="#OutOfMemoryError异常" class="headerlink" title="OutOfMemoryError异常"></a>OutOfMemoryError异常</h1><h2 id="Java堆异常"><a href="#Java堆异常" class="headerlink" title="Java堆异常"></a>Java堆异常</h2><p>我们都知道Java的堆用于存储对象实例，想要得到堆溢出异常，我们只要不断的创建对象就可以，GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么随着对象数量的增加，总容量触及最大堆的容量限制后就会产生内存溢出异常，同时通过参数设置避免堆的自动扩充。</p><p>VM参数:-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=C:\Users\USERzhw</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOom</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList <span class="token operator">&lt;</span>OomObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">OomObject</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OomObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/VR2Nb7m8EnqKhvZ.png" alt="运行结果"></p><p>可以看到成功抛出了内存溢出异常，位于Java中的堆空间。</p><h2 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StacksOf</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        StacksOf stacksOf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StacksOf</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            stacksOf<span class="token punctuation">.</span><span class="token function">StackLeak</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"stackLength = "</span> <span class="token operator">+</span> stacksOf<span class="token punctuation">.</span>stackLength <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">StackLeak</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">StackLeak</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/khv1WmFPRSZrKpU.png" alt="结果"></p><h2 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h2>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的内存区域</title>
      <link href="/2020/03/10/jvm/java-zhong-nei-cun-qu-yu/"/>
      <url>/2020/03/10/jvm/java-zhong-nei-cun-qu-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的内存区域"><a href="#Java中的内存区域" class="headerlink" title="Java中的内存区域"></a>Java中的内存区域</h1><p>引用书中一句话：</p><blockquote><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。</p></blockquote><p>这句话真的太经典了，网上查阅资料后我的理解：</p><p><strong>C++支持编写一些非常底层的程序，从而能够操作计算机硬件，并操纵实际内存地址。但这些是以牺牲可移植性为代价的，因为这时每个程序都是针对某种具体硬件环境的。而Java基于Java虚拟机（虚拟机的底层也是C++/C进行操作的）实现了跨平台性，Java开发无需关注底层，JAVA虚拟机为了我们解决了这些问题，将Java的开发注重与功能上。</strong></p><hr><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/A8QjdIgh1VcDJFe.png" alt="运行时的数据区"></p><p>下面会注意介绍这些功能</p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>在Java虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存</p><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>虚拟机栈描述的是Java方法执行的线程内存模型。</p><p>它的生命周期与线程相同。</p><p>每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存放<code>局部变量表</code>、<code>操作数栈</code>、<code>动态连接</code>、<code>方法出口</code>。</p><p>笼统的将Java内存区域划分为：<code>堆</code>和<code>栈</code>（继承自传统的C/C++程序中的内存划分）</p><p>这样的划分在Java语言中显得有些粗糙，实际的情况要远比这个复杂。</p><p>不过这样的划分也间接体现了内存划分中的两个重要区域：<code>堆</code>和<code>栈</code>。</p><p>这里的栈通常情况下来说，指的是虚拟机栈中的<strong>局部变量表</strong>。</p><p><strong>局部变量表：</strong></p><ul><li><strong>八大基本的数据类型</strong></li><li><strong>对象引用类型</strong></li><li><strong>ReturnAddress类型</strong></li></ul><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>与虚拟机栈发挥的作用非常相似。</p><p>区别：</p><ul><li><strong>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。</strong></li><li><strong>本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</strong></li></ul><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>堆是虚拟机内存管理中最大的一块。</p><p>Java堆是被所有线程共享的一块区域，<code>几乎几乎几乎</code>所有的对象都在这里分配内存。</p><blockquote><p>随着技术的进步已经能看到些许迹象表明日后可能出现值类型的支持，即使只考虑现在，由于即时编译技术的进步，尤其是逃逸分析技术的日渐强大，栈上分配、标量替换优化手段已经导致一些微妙的变化悄然发生，所以说Java对象实例都分配在堆上也渐渐变得不是那么绝对了。</p></blockquote><p>在《Java虚拟机规范》中对Java堆的描述是：<code>所有的对象实例以及数组都应当在堆上分配</code>。</p><p>如果从分配内的角度看，所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区，以提升对象分配时的效率。</p><p>无论怎么分配内存，都不会改变Java堆中存储内容的共享性，<code>将Java堆细分的目的只是为了更好的回收内存，或者更快的分配内存。</code></p><p><strong>线程共享的Java堆中可以划分出多个线程私有的分配缓冲区<code>TLAB</code>。</strong></p><blockquote><p>所以说堆是完完全全线程共享的吗？ 这也不太对。</p></blockquote><p>Java堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作<code>GC堆</code>。</p><p>因为现代垃圾收集器大部分都是基于分代收集理论设计的，所以Java堆中经常会出现 <code>新生代</code> 、<code>老年代</code> 、<code>永久代</code> 、<code>Eden空间</code>、 <code>From Survivor空间</code> 、<code>To Survivor空间</code>等名词。</p><p>这些概念在本书后续章节中还会反复登场亮相，在这里笔者想先说明的是这些区域划分仅仅是一部分垃圾收集器的共同特性或者说设计风格而已，而非某个Java虚拟机具体实现的固有内存布局，更不是《Java虚拟机规范》里对Java堆的进一步细致划分。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区与Java堆一样，是各个线程共享的内存区域，它用于存储已被<code>虚拟机加载的类型信息</code>、<code>常量</code>、<code>静态变量</code>、<code>即时编译器编译的代码缓存</code>等数据。</p><p>《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<code>非堆</code>，目的是与Java堆区分开来。</p><p>永生代的概念：</p><blockquote><p><strong>在JDK8以前</strong>，许多Java程序程序员习惯于在HotSpot虚拟机上开发，很多人愿意把方法区称做<code>永生代</code></p></blockquote><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><p>常量池是方法区的一部分，Class文件中除了有<code>类的版本</code>，<code>字段</code>，<code>方法</code>，<code>接口</code>等描述信息外，还有一项就是<code>常量池</code>。</p><p>常量池用于存放即时编译时期生成的字面量与符号引用，这部分内容会在类被加载后 存放到方法区中的常量池中。</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>在Java语言层面创建对象的方式通常为：</p><ol><li>new关键字</li><li>克隆</li><li>反序列化</li></ol><p>而我们最常用的莫过于new关键字</p><p>在Java虚拟机中通过new 关键字创建对象的过程：</p><ol><li>首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用。</li><li>检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</li><li>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。（对象内存大小在类被加载解析的过程中被确定下来）</li></ol><p>为对象分配空间的实际任务就是<strong>把一块确定大小的内存块从Java堆中取出，用于存放对象</strong>。</p><p>在划分的过程中有两个主要的思想：</p><p><strong>在内存绝对规整排列的情况下</strong>：</p><p>将所有使用过的内存放在一边，未使用过的内存放在另一边，定义一个二者的分界点指针。</p><p>分配的过程就可以理解为：把指针向未使用过的内存区域划分一个与对象内存大小相同的区域，这样的方法称为<code>指针碰撞</code>。</p><p>书的描述：</p><blockquote><p>假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/p9sBVbaT5EM4XSO.png" alt="分配前"></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/iv3cp5WK8hVMtnC.png" alt="分配后"></p><p><strong>在内存不规则排列的情况下：</strong></p><p>如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了。</p><p>虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为<code>空闲列表</code></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/q8xpUFHPRDE4GwL.png" alt="分配前"></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/Ge8TKftrUclN5wq.png" alt="分配后"></p><blockquote><p><strong>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定。</strong></p></blockquote><p>问题：在多线程环境下可能会出现问题，无法保证原子性。</p><p>两种解决方案：</p><ol><li><strong>经典的CAS +  自旋操作实现线程同步，确保原子性。</strong></li><li>没太看懂-&gt; 是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲，哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。</li></ol><p>针对第二条看了别人写的博客给出的理解：</p><blockquote><p><strong>TLAB是虚拟机在堆内存的eden划分出来的一块专用空间，是线程专属的。在虚拟机的TLAB功能启动的情况下，在线程初始化时，虚拟机会为每个线程分配一块TLAB空间，只给当前线程使用，这样每个线程都单独拥有一个空间，如果需要分配内存，就在自己的空间上分配，这样就不存在竞争的情况，可以大大提升分配效率。</strong></p></blockquote><p><strong>内存分配完成之后，虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值。</strong></p><p>这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。</p><p>接下来，Java虚拟机还要对<strong>对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。</strong></p><p>这些信息存放在<strong>对象的对象头</strong>之中。</p><p>根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><p>接下来书中用了一段 HotSport的解释器代码（C++写的）来说明对象的创建过程。。</p><p>具体可以概括为：</p><ol><li><strong>类加载机制检查</strong>：JVM首先检查一个new指令的参数是否能在常量池中定位到一个符号引用，并且检查该符号引用代表的类是否已被加载、解析和初始化过</li><li><strong>分配内存</strong>：把一块儿确定大小的内存从Java堆中划分出来</li><li><strong>初始化零值：</strong>对象的实例字段不需要赋初始值也可以直接使用其默认零值，就是这里起得作用</li><li><strong>设置对象头：</strong>存储对象自身的运行时数据，类型指针</li><li><strong>执行</strong>：为对象的字段赋值</li></ol><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在虚拟机中，对象在内存的布局可以划分为三个部分：<code>对象头</code>、<code>实例数据</code>、<code>对其填充</code>。</p><p>由于书中写是对于32位的虚拟机所写的，64位的与32位的大不相同，所以先暂时放一下。</p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>在我们成功创建对象之后，新的问题是如何访问对象？</p><p>我们所写的Java程序会通过对象的<code>引用&amp;reference</code>(位于虚拟机栈中)来操作位于堆上的具体对象。</p><p>现在又有研究的了，既然你是通过引用去访问的具体对象，那引用是怎么关联、定位到堆中的对象的呢？</p><p>主流的方式有：<code>句柄</code>和<code>直接指针</code>。</p><p><strong>句柄：</strong></p><p>Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/JHLljmnAK7sEUTV.png" alt="句柄"></p><p><strong>直接指针：</strong></p><p>直接指针访问，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/10/AaLF2tTNWdHGCMj.png" alt="直接指针"></p><p><strong>两者的区别：</strong></p><ol><li>句柄的好处在于，reference指向的是稳定的句柄地址，在垃圾收集数据进行移动时，只需要改变实例对象指针就行，无需改变reference。</li><li>使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本。HotSpot使用的就是这种方式</li></ol><p>参考：<a href="http://www.hollischuang.com/archives/3875" target="_blank" rel="noopener">http://www.hollischuang.com/archives/3875</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if..else表达式优化策略</title>
      <link href="/2020/03/09/java/if..else-biao-da-shi-you-hua-ce-lue/"/>
      <url>/2020/03/09/java/if..else-biao-da-shi-you-hua-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p><strong>if…else</strong> 是所有高级编程语言都有的必备功能。但现实中的代码往往存在着过多的 if…else。如果我们日常工作中需要进行以一个逻辑比较复杂的判断，写完后会嵌套好几层if..else，这样代码的可读性和可维护性非常差，下面介绍几种优化if..else的策略，提高我们代码的可读性和简洁程。</p><h1 id="1-取反条件，提前return"><a href="#1-取反条件，提前return" class="headerlink" title="1. 取反条件，提前return"></a>1. 取反条件，提前return</h1><p>这是我们日常中经常遇到，但是又容易忽略的情况。</p><ul><li>优化前：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> xxx <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span>（<span class="token operator">!</span>condition）<span class="token punctuation">{</span>    <span class="token keyword">return</span> xxx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-条件三目运算符"><a href="#2-条件三目运算符" class="headerlink" title="2. 条件三目运算符"></a>2. 条件三目运算符</h1><p>这在Java基础中学过，但是缺很少运用到实际中。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span>  num <span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>    num <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> condition <span class="token operator">?</span> <span class="token number">80</span> <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-数组优化（表驱动法）"><a href="#3-数组优化（表驱动法）" class="headerlink" title="3. 数组优化（表驱动法）"></a>3. 数组优化（表驱动法）</h1><p>这里举例我们想要得到一年各个月份的天数。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getDays</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">29</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> monthDays<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getDays</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> monthDays<span class="token punctuation">[</span><span class="token operator">--</span>month<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-表驱动法："><a href="#4-表驱动法：" class="headerlink" title="4.表驱动法："></a>4.表驱动法：</h1><p><strong>表驱动法</strong>，又称之为表驱动、表驱动方法。表驱动方法是一种使你可以在表中查找信息，而不必用很多的逻辑语句（if或Case）来把它们找出来的方法。以下的demo，把map抽象成表，在map中查找信息，而省去不必要的逻辑语句。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dosomething1</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dosomething2</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dosomething3</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> Function<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> action<span class="token operator">></span> actionMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里泛型 ? 是为方便演示，实际可替换为你需要的类型</span><span class="token comment" spellcheck="true">// 初始化</span>actionMappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> <span class="token punctuation">(</span>someParams<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">dosomething1</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actionMappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value2<span class="token punctuation">,</span> <span class="token punctuation">(</span>someParams<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">dosomething2</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>actionMappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value3<span class="token punctuation">,</span> <span class="token punctuation">(</span>someParams<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">dosomething3</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略多余逻辑语句</span>actionMappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>someParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里非常的精髓，将我们的HashMap ,Function&lt;T, R&gt; 和Lambda 结合起来。</p><h1 id="5-优化逻辑结构，让正常流程走主干"><a href="#5-优化逻辑结构，让正常流程走主干" class="headerlink" title="5.优化逻辑结构，让正常流程走主干"></a>5.优化逻辑结构，让正常流程走主干</h1><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAdjustedCapital</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_capital <span class="token operator">&lt;=</span> <span class="token number">0.0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_intRate <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> _duration <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>_income <span class="token operator">/</span> _duration<span class="token punctuation">)</span> <span class="token operator">*</span>ADJ_FACTOR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAdjustedCapital</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_capital <span class="token operator">&lt;=</span> <span class="token number">0.0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_intRate <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> _duration <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>_income <span class="token operator">/</span> _duration<span class="token punctuation">)</span> <span class="token operator">*</span>ADJ_FACTOR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//再优化</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAdjustedCapital</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_capital <span class="token operator">&lt;=</span> <span class="token number">0.0</span> <span class="token operator">||</span>_intRate <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> _duration <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>_income <span class="token operator">/</span> _duration<span class="token punctuation">)</span> <span class="token operator">*</span>ADJ_FACTOR<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感觉这里的思想和取反条件，提前return差不多。</p><h1 id="6-Optional"><a href="#6-Optional" class="headerlink" title="6. Optional"></a>6. Optional</h1><p>Java 代码中的一部分 if…else 是由非空检查导致的。因此，降低这部分带来的 if…else 也就能降低整体的 if…else 的个数。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> strOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strOptional<span class="token punctuation">.</span><span class="token function">ifPresentOrElse</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Java 8 为我们提供了强大的能力，它的新特性是划时代的（Java 8 之后的版本中新特性都不够亮眼），包括 Lambda 表达式和 Stream 流，我们通过它们可以写出简洁又高效的代码。</p><p>但是我们需要注意不能过度可以的去使用这些方法，过度不恰当的使用可能会造成我们代码的混乱，不可读性，甚至低效。</p><p>函数式编程出现的目的可不仅仅是为了减少冗余代码，它是为了解放生产力——言外之意就是说，代码复杂点没关系，只要可用可靠。编程的目标不是产生尽可能少的代码，而是产生易于维护的、高性能的系统。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK1.7Hashtable&amp;ConcurrentHashMap探究</title>
      <link href="/2020/03/08/java/jdk1.7hashtable-concurrenthashmap/"/>
      <url>/2020/03/08/java/jdk1.7hashtable-concurrenthashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK1-7Hashtable-amp-ConcurrentHashMap探究"><a href="#JDK1-7Hashtable-amp-ConcurrentHashMap探究" class="headerlink" title="JDK1.7Hashtable&amp;ConcurrentHashMap探究"></a>JDK1.7Hashtable&amp;ConcurrentHashMap探究</h1><p>在JDK1.7HashMap探究&amp;手写HashMap这篇文章中，我们探究了HashMap的底层实现原理，分析了产生死锁的原因。</p><p>HashMap在我们日常生活中使用频繁，不免在多线程的环境下使用，因为HashMap是非同步的，那么就很有可能产生死锁的情况。</p><p>有什么办法能解决这样的问题呢？</p><p>我们来看HashMap文档的注释。</p><pre class="line-numbers language-visual"><code class="language-visual">(The <tt>HashMap</tt>* class is roughly equivalent to <tt>Hashtable</tt>, except that it is* unsynchronized and permits nulls.) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段话的意思是：HashMap大致相当于Hashtable, 除了它是不安全的以及允许为空。</p><p>结论：</p><blockquote><p><strong>如果我们想在多线程环境下使用HashMap，我们可以使用Hashtable来代替它，Hashtable大致相当于HashMap，只是key和value不允许为空。</strong></p></blockquote><h2 id="Hashtable与HashMap的比较"><a href="#Hashtable与HashMap的比较" class="headerlink" title="Hashtable与HashMap的比较"></a>Hashtable与HashMap的比较</h2><p>我们来看一下Hashtable的源码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先Hashtable继承自Dictionary类，实现了Map、Cloneable以及Serializable接口</p><p>Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。</p><p>但是现在以及过时。</p><p>参数方面基本和HashMap一致。</p><p><strong>构造函数方面：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">Hashtable</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Load: "</span><span class="token operator">+</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            initialCapacity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>initialCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAX_ARRAY_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器的默认初始容量为11，负载因子为0.75。</p><p><strong>计算hash值的方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// hashSeed will be zero if alternative hashing is disabled.</span>    <span class="token keyword">return</span> hashSeed <span class="token operator">^</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接调用了object的hashCode()方法然后与hashSeed做一次异或运算，这样的操作效率是很低的。</p><p><strong>扩容</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> newCapacity <span class="token operator">=</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扩容后的新的数组容量 = （原数组容量*2） +1</p><ul><li><strong>总结</strong></li></ul><blockquote><ul><li><strong>Hashmap中的默认初始容量为16，Hashtable中为11，负载因子都是0.75</strong></li><li><strong>HashMap中允许存储null值，Hashtable中会抛出异常。</strong></li><li><strong>HashMap中计算hash值的方法比较复杂，进行了多次右移运算，再进行运算得到hash值，Hashtable中比较简单，直接用hashcode()方法得到进行运算。</strong></li><li><strong>HashMap的扩容为原数组的两倍，Hashtable是两倍+1</strong></li></ul></blockquote><h2 id="Hashtable的并发核心思想"><a href="#Hashtable的并发核心思想" class="headerlink" title="Hashtable的并发核心思想"></a><strong>Hashtable的并发核心思想</strong></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">remove</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到这些关键操作都加上了synchronized关键字，我们都知道synchronized是重量级锁，系统检查到锁是重量级锁之后，会把等待想要获得锁的线程进行<strong>阻塞</strong>，被阻塞的线程不会消耗cup。但是阻塞或者唤醒一个线程时，都需要操作系统来帮忙，这就需要从<strong>用户态</strong>转换到<strong>内核态</strong>，而转换状态是需要消耗很多时间的，有可能比用户执行代码的时间还要长。</p><p>而且可以发现一个问题：</p><p>假设我们在多线程环境下对一个hashtable进行操作，我们put()一个数据进入下标为5的位置，同时想要对下标为3的数据进行读取操作，这在Hashtable中不能实现的，因为这些方法都加上了synchronized关键字，在同一时刻只能有一个线程进行操作，其他线程处于等待阻塞状态。</p><p><strong>这样的做法实现了并发安全性，却大大的降低了我们的效率。</strong></p><h2 id="Collections-synchronizedMap"><a href="#Collections-synchronizedMap" class="headerlink" title="Collections.synchronizedMap"></a>Collections.synchronizedMap</h2><p>JDK在Collections对象中提供了大量可以实现集合并发安全的方法：</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/08/NrQ1kFUWuJBocjT.png" alt=""></p><p>在HashMap文档中我们得知利用Collections.synchronizedMap方法传入一个HashMap实例去得到一个并发安全的map。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">synchronizedMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//SynchronizedMap是一个静态内部类</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Serializable<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/08/piw8R2BhcAtxJCq.png" alt="synchronizedMap"></p><p><strong>它里面的大多数操作也都是加入synchronized关键字，基本上和Hashtable的原理一样，所以它的效率也是很低的。</strong></p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p><strong>问题：</strong></p><blockquote><p><strong>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并 发访问效率，这就是ConcurrentHashMap所使用的锁分段技术</strong></p></blockquote><p>在 JDK1.5中 Java提供了 java.util.concurrent.ConcurrentHashMap 类，首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p><p>先暂时放在这里。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github常用命令与网站部署</title>
      <link href="/2020/03/02/gong-ju/github-chang-yong-ming-ling-yu-bao-ta-wang-zhan-bu-shu/"/>
      <url>/2020/03/02/gong-ju/github-chang-yong-ming-ling-yu-bao-ta-wang-zhan-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Github常用命令与网站部署"><a href="#Github常用命令与网站部署" class="headerlink" title="Github常用命令与网站部署"></a>Github常用命令与网站部署</h1><h2 id="Github常用命令"><a href="#Github常用命令" class="headerlink" title="Github常用命令"></a>Github常用命令</h2><p><strong>git init 新建一个空的仓库</strong><br><strong>git status 查看状态</strong><br><strong>git add . 添加文件</strong><br><strong>git commit -m ‘注释’ 提交添加的文件并备注说明</strong><br><strong>git remote add origin #连接你的Github仓库 连接远程仓库</strong><br><strong>git push -u origin master 将本地仓库文件推送到远程仓库</strong><br><strong>git log 查看变更日志</strong><br><strong>git reset –hard 版本号前六位 回归到指定版本</strong><br><strong>git branch 查看分支</strong><br><strong>git branch newname 创建一个叫newname的分支</strong><br><strong>git checkout newname 切换到叫newname的分支上</strong><br><strong>git merge newname 把newname分支合并到当前分支上</strong><br><strong>git pull origin master 将master分支上的内容拉到本地上</strong></p><h2 id="使用Git向Github-提交代码"><a href="#使用Git向Github-提交代码" class="headerlink" title="使用Git向Github 提交代码"></a>使用Git向Github 提交代码</h2><blockquote><p><strong>第一次使用</strong></p></blockquote><p><strong>第一步：</strong>在Github创建一个仓库</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/wjiUV7frSpBd5cH.png" alt="创建仓库"></p><p><strong>第二步：</strong>进入本地项目文件夹。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化代码仓库，会在文件夹下生成一个.git文件。</p><p><strong>第三步：</strong>添加文件到版本库（只是先放在了缓存区里缓冲区）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第四步：</strong>把添加的文件提交到版本库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"first commit"</span> <span class="token comment" spellcheck="true"># 可以自定义提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第五步：</strong>将本地库与远程库关联</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin <span class="token comment" spellcheck="true">#后面跟上你的仓库地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第六步：</strong>推送代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master // 推送代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>以后使用</strong></p></blockquote><p><strong>进入要提交代码的文件</strong>执行一下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master  <span class="token comment" spellcheck="true">#拉取远程仓库到本地</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'描述内容'</span><span class="token function">git</span> push origin master  <span class="token comment" spellcheck="true"># 推送到GitHub仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hexo博客创建分支管理"><a href="#Hexo博客创建分支管理" class="headerlink" title="Hexo博客创建分支管理"></a>Hexo博客创建分支管理</h2><p>我们的Hexo博客部署在Github通过hexo clean | hexo g | hexo d 这一系列流程将我们的静态博客提交到Github仓库中。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/it1WmZXD5lofQs8.png" alt="我的博客仓库"></p><p>这是我的Hexo博客，可以看到我们提交的是经过hexo生成的代码文件。</p><p>这和我们的博客源码文件不一样，如果哪天你更换电脑，或者误删了博客文件，会很不好管理，所以我们通过创建分支（branch）来管理我们的博客源码。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> <span class="token comment" spellcheck="true">###进入你的hexo博客文件</span><span class="token function">git</span> init  <span class="token comment" spellcheck="true">#初始化过了后就不必初始化</span><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#将必要的文件依次添加</span><span class="token function">git</span> commit -m <span class="token string">"提交hexo 配置文件"</span><span class="token function">git</span> branch hexo  <span class="token comment" spellcheck="true">#新建hexo分支</span><span class="token function">git</span> checkout hexo  <span class="token comment" spellcheck="true">#切换到hexo分支上 git switch hexo也可以</span><span class="token function">git</span> remote add origin <span class="token comment" spellcheck="true">#本地与远程对接</span><span class="token function">git</span> push origin hexo  <span class="token comment" spellcheck="true">#push到github项目文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/E8v9nY4xIdMi7HV.png" alt="hexo分支"></p><p>这样就保存了我们的源代码的文件了。</p><h2 id="宝塔将Java-Web项目部署到Tomcat服务器"><a href="#宝塔将Java-Web项目部署到Tomcat服务器" class="headerlink" title="宝塔将Java Web项目部署到Tomcat服务器"></a>宝塔将Java Web项目部署到Tomcat服务器</h2><p><strong>准备前提：</strong></p><ul><li>一台服务器</li><li>一个Java Web项目</li></ul><ul><li>宝塔服务器运维面板（傻瓜式安装）</li></ul><p>宝塔服务器：</p><p><a href="https://www.bt.cn/?btwaf=97644413" target="_blank" rel="noopener">https://www.bt.cn/?btwaf=97644413</a></p><p><strong>进入官网按步骤操作后进入宝塔面板</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/zmWCPj7l1vTnRAs.png" alt=""></p><p>安装这两个主要的软件（没有数据库连接可以不用，也可以用nignx）,去软件商店中安装想要的软件。</p><p><strong>将Java Web项目打成war包</strong></p><p><strong>点击-&gt; <code>文件</code>-&gt;<code>www</code>-&gt;<code>server</code>&gt;<code>tomcat</code>-&gt;<code>webapps</code></strong></p><p><strong>将war包放到webapps目录中</strong></p><p><strong>重启tomcat服务器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/7kWTsO2YvyAB8aq.png" alt="重启tomcat"></p><p><strong>数据库配置</strong></p><p><strong>创建宝塔服务器数据库，密码会自动生成。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/02/6EiRU2m7BpTcCjP.png" alt="创建数据库"></p><p><strong>连接数据库的xx.properties文件改为宝塔服务器的数据库。</strong></p><p><strong>最后就可以通过：<code>服务器域名：端口号/项目文件名/</code>  访问了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底搞懂Synchronized和Volatile</title>
      <link href="/2020/02/29/duo-xian-cheng/che-di-gao-dong-synchronized-he-volatile/"/>
      <url>/2020/02/29/duo-xian-cheng/che-di-gao-dong-synchronized-he-volatile/</url>
      
        <content type="html"><![CDATA[<h1 id="彻底搞懂Synchronized和Volatile"><a href="#彻底搞懂Synchronized和Volatile" class="headerlink" title="彻底搞懂Synchronized和Volatile"></a>彻底搞懂Synchronized和Volatile</h1><h2 id="Synchronize基本介绍"><a href="#Synchronize基本介绍" class="headerlink" title="Synchronize基本介绍"></a>Synchronize基本介绍</h2><blockquote><p>什么是Synchronized？谈谈你对Synchronized的理解</p></blockquote><p><strong>Synchronized，是Java中用于解决<code>并发</code>情况下<code>数据同步</code>访问的一个很重要的关键字。当我们想要保证一个共享资源在同一时间只会被一个线程访问到时，我们可以在代码中使用Synchronized关键字对类或者对象加锁。</strong></p><hr><p><strong>简单理解就是一个<code>锁</code>。</strong></p><blockquote><p>Synchronized实现同步的基础是什么？</p></blockquote><p>synchronized实现同步的基础：</p><p>Java中的每一个对象都可以作为锁。具体表现为以下3种形式。</p><ul><li><strong>对于普通同步方法，锁是当前实例对象。</strong></li><li><strong>对于静态同步方法，锁是当前类的Class对象。</strong></li><li><strong>对于同步方法块，锁是Synchonized括号里配置的对象。</strong></li></ul><p>对于普通同步方法和静态同步方法可能会有误解：</p><p>实例对象：<strong>是指我们通过new关键字new出来的那个对象</strong></p><p>Class对象：<strong>是每一个类对应的Class对象。也就是不关你 new 几个xx对象它们都属于同一个Class类的对象。</strong></p><p>可以参考八锁问题深刻理解这个三种方式。</p><hr><blockquote><p>Synchronized的三大特性</p></blockquote><p>这里引用《深入理解Java虚拟机》中的一段话：</p><blockquote><p><strong>synchronized关键字在需要原子性、可见性和有序性这三种特性的时候都可以作为其中一种解决方案，看起来万能的。的确，大部分并发控制操作都能使用synchronized来完成。</strong></p></blockquote><p>可以看到synchronized的三大特性：</p><ul><li><strong>原子性</strong></li><li><strong>可见性</strong></li><li><strong>有序性</strong></li></ul><p>对于这三个特性先给出概念一下再仔细探究</p><p><strong>原子性</strong>：<strong>原子指化学反应不可再分的基本微粒，原子性是指一个操作是不可中断的，要全部执行完成，要不就都不执行。</strong></p><p><strong>可见性：</strong> <strong>可见性是指当多个线程同时访问同一个变量时，一旦又线程改变了这个变量的值，其他线程能够立即看到修改的值。</strong></p><p><strong>有序性：</strong>  <strong>有序性即程序执行的顺序按照代码的先后顺序执行。</strong></p><hr><p>那么我们现在知道了Synchronized可以通过修饰代码块和方法，来确保在同一时刻只有一个线程能够访问代码块里面的内容或者方法。</p><blockquote><p>那这个过程是怎么实现的呢？</p></blockquote><p>这里给出一个案例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对Synchronized Class对象进行加锁</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Test1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//静态同步方法，对Synchronized Class对象进行加锁</span>        <span class="token function">m</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过JDK自带的工具,将Test1.class文件反编译成汇编查看一下synchronized的实现。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/29/ctrXF9B4mgDfV8R.png" alt="代码块"></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/29/dlvDbLVQiWt9Jnm.png" alt="修饰方法"></p><p>《Java并发编程的艺术》中给出的解释：</p><blockquote><p><strong>上面class信息中，对于同步块的实现使用了<code>monitorenter</code>和<code>monitorexit</code>指令，而同步方法则 是依靠方法修饰符上的<code>ACC_SYNCHRONIZED</code>来完成的。无论采用哪种方式，其本质是对一 个对象的监视器<code>monitor</code>进行获取，而这个获取过程是排他的，也就是同一时刻只能有一个 线程获取到由synchronized所保护对象的监视器。</strong><br><strong>任意一个对象都拥有自己的监视器，当这个对象由同步块或者这个对象的同步方法调用时，执行方法的线程必须先获取到该对象的监视器才能进入同步块或者同步方法，而没有获 取到监视器（执行该方法）的线程将会被阻塞在同步块和同步方法的入口处，进入BLOCKED状态。</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/29/F9Zcl8B3EXukUIn.png" alt=""></p><p>从图中可以看到，任意线程对Object（Object由synchronized保护）的访问，首先要获得 Object的监视器。如果获取失败，线程进入同步队列，线程状态变为BLOCKED。当访问Object的前驱（获得了锁的线程）释放了锁，则该释放操作唤醒阻塞在同步队列中的线程，使其重新尝试对监视器的获取。</p><p>在<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.11.10" target="_blank" rel="noopener">The Java® Virtual Machine Specification</a>中有关于同步方法和同步代码块的实现原理的介绍，我翻译成中文如下：</p><blockquote><p>方法级的同步是隐式的。同步方法的常量池中会有一个<code>ACC_SYNCHRONIZED</code>标志。当某个线程要访问某个方法的时候，会检查是否有<code>ACC_SYNCHRONIZED</code>，如果有设置，则需要先获得监视器锁，然后开始执行方法，方法执行之后再释放监视器锁。这时如果其他线程来请求执行方法，会因为无法获得监视器锁而被阻断住。值得注意的是，如果在方法执行过程中，发生了异常，并且方法内部并没有处理该异常，那么在异常被抛到方法外面之前监视器锁会被自动释放。</p><p>同步代码块使用<code>monitorenter</code>和<code>monitorexit</code>两个指令实现。可以把执行<code>monitorenter</code>指令理解为加锁，执行<code>monitorexit</code>理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行<code>monitorenter</code>）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行<code>monitorexit</code>指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。</p></blockquote><p>不论是monitorenter、monitorexit、ACC_SYNCHRONIZED、Object.wait()、Object.notify()。这些方法都是基于monitor实现的。monitor是HotSpot虚拟机中采用ObjectMonitor实现，由于水平有限，这里不做介绍。</p><p>现在来对Synchroized的三大特性做出解释：</p><hr><h2 id="Synchroized的三大特性"><a href="#Synchroized的三大特性" class="headerlink" title="Synchroized的三大特性"></a>Synchroized的三大特性</h2><p> <strong>原子性：</strong></p><p>线程是CPU调度的基本单位。CPU有时间片的概念，会根据不同的调度算法进行线程调度。当一个线程获得时间片之后开始执行，在时间片耗尽之后，就会失去CPU使用权。所以在多线程场景下，由于时间片在线程间轮换，就会发生原子性问题。</p><p>在Java中，为了保证原子性，提供了两个高级的字节码指令<code>monitorenter</code>和<code>monitorexit</code>。前面中，介绍过，这两个字节码指令，在Java中对应的关键字就是<code>synchronized</code>。</p><p>通过<code>monitorenter</code>和<code>monitorexit</code>指令，可以保证被<code>synchronized</code>修饰的代码在同一时间只能被一个线程访问，在锁未释放之前，无法被其他线程访问到。因此，在Java中可以使用<code>synchronized</code>来保证方法和代码块内的操作是原子性的。</p><p> <strong>可见性：</strong></p><p>造成不可见性的原因：在Java内存模型中，所有的变量都存在主存中，每条线程拥有自己的工作内存，每一个访问主存的线程都拥有一个主存的拷贝副本，将其放在线程自己的工作内存中，当一个线程对变量进行修改时，先经过工作内存再刷新到主存，另一个持有该变量的线程，再通过自己的工作内存去主存中读取新的数据。</p><p>所以当一个线程修改了数据，对另一个持有该数据的线程来说，这次的更新操作对另一个线程是不可见的。</p><p>Java中这样规定：</p><ul><li><p>线程解锁前,必须把共享变量的最新值刷新到主内存</p></li><li><p>线程加锁时,将清空工作内存中共享变量的值,从而使用共享变量时需要从主内存中重新读取最新的值</p><p><strong>有序性：</strong></p></li></ul><p>除了引入了时间片以外，由于处理器优化和指令重排等，CPU还可能对输入代码进行乱序执行，比如load-&gt;add-&gt;save 有可能被优化成load-&gt;save-&gt;add 。这就是可能存在有序性问题。</p><p>这里需要注意的是，<code>synchronized</code>是无法禁止指令重排和处理器优化的。也就是说，<code>synchronized</code>无法避免上述提到的问题。</p><p>那么，为什么还说<code>synchronized</code>也提供了有序性保证呢？</p><p>这就要再把有序性的概念扩展一下了。Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有操作都是天然有序的。如果在一个线程中观察另一个线程，所有操作都是无序的。</p><p>以上这句话也是《深入理解Java虚拟机》中的原句，但是怎么理解呢？周志明并没有详细的解释。这里我简单扩展一下，这其实和<code>as-if-serial语义</code>有关。</p><p><code>as-if-serial</code>语义的意思指：不管怎么重排序（编译器和处理器为了提高并行度），单线程程序的执行结果都不能被改变。编译器和处理器无论如何优化，都必须遵守<code>as-if-serial</code>语义。</p><p>这里不对<code>as-if-serial语义</code>详细展开了，简单说就是，<code>as-if-serial语义</code>保证了单线程中，指令重排是有一定的限制的，而只要编译器和处理器都遵守了这个语义，那么就可以认为单线程程序是按照顺序执行的。当然，实际上还是有重排的，只不过我们无须关心这种重排的干扰。</p><p>所以呢，由于<code>synchronized</code>修饰的代码，同一时间只能被同一线程访问。那么也就是单线程执行的。所以，可以保证其有序性。</p><ul><li>可见性实例</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//资源类</span><span class="token keyword">class</span> <span class="token class-name">H</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        H h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-> num的值："</span><span class="token operator">+</span> h<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-> num的值："</span><span class="token operator">+</span> h<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            h<span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-> num的值："</span><span class="token operator">+</span> h<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main-&gt; num的值：2<br>A-&gt; num的值：2<br>main-&gt; num的值：1</p><hr><h2 id="Volatile基本介绍"><a href="#Volatile基本介绍" class="headerlink" title="Volatile基本介绍"></a>Volatile基本介绍</h2><blockquote><p> 请你谈谈你对 Volatile 的理解</p></blockquote><p> Volatile 是轻量级的Synchronized，它的实现确保了可见性以及指令重排，不能够实现同步。</p><ul><li><p>1、保证可见性 </p></li><li><p>2、不保证原子性</p></li><li><p>3、禁止指令重排</p></li></ul><p><strong>Valatile定义：</strong></p><blockquote><p><strong>Java语言规范第3版中对volatile的定义如下：Java编程语言允许线程访问共享变量，为了 确保共享变量能被准确和一致地更新，线程应该确保通过排他锁单独获得这个变量。Java语言 提供了volatile，在某些情况下比锁要更加方便。如果一个字段被声明成volatile，Java线程内存</strong><br><strong>模型确保所有线程看到这个变量的值是一致的。</strong></p></blockquote><hr><h2 id="Volatile的三大特性"><a href="#Volatile的三大特性" class="headerlink" title="Volatile的三大特性"></a>Volatile的三大特性</h2><ul><li><strong>保证可见性</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不加 volatile 程序就会死循环！    </span>    <span class="token comment" spellcheck="true">// 加 volatile 可以保证可见性</span>    <span class="token comment" spellcheck="true">// 可见性： 可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/26/VLwsjHvixOErZn3.png" alt="没有volatile关键字"></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/26/wNpodxMlj7qPz4h.png" alt="有volatile关键字"></p><p><strong>深入探究一下Volatile 可见性的原因</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 模拟一个demo去给volatile 类型变量num赋值</span><span class="token comment" spellcheck="true">// 我们通过工具查看 对valatile进行写操作时，CPU做的事情</span>    <span class="token keyword">volatile</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        JMMDemo jmmDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        jmmDemo<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>0x000001bc005902d9: lock add dword ptr</strong></p><p>通过查IA-32架 构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事情。</p><ul><li><strong>将当前处理器缓存行的数据写回到系统内存。</strong></li><li><strong>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></li></ul><p>volatile的两条实现原则：</p><blockquote><p><strong>摘自《Java并发编程的艺术》</strong></p><ul><li>Lock前缀指令会引起处理器缓存回写到内存。Lock前缀指令导致在执行指令期间，声 言处理器的LOCK#信号。在多处理器环境中，LOCK#信号确保在声言该信号期间，处理器可以 独占任何共享内存[2]。是，在最近的处理器里，LOCK＃信号一般不锁总线，而是锁缓存，毕 竟锁总线开销的比较大。对于Intel486和 Pentium处理器，在锁操作时，总是在总线上声言LOCK#信号。但在P6和目前的处理器中，如果 访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号。相反它会锁定这块内存区 域的缓存并回写到内存，并使用缓存一致性机制来确保修改的原子性，此操作被称为“缓存锁 定”，<strong>缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</strong></li><li>一个处理器的缓存回写到内存会导致其他处理器的缓存无效。IA-32处理器和Intel 64处 理器使用MESI（修改、独占、共享、无效）控制协议去维护内部缓存和其他处理器缓存的一致 性。在多核处理器系统中进行操作的时候，IA-32和Intel 64处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的 缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，<strong>如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充。</strong></li></ul></blockquote><ul><li><strong>不保证原子性（和事务的原子性一个意思）</strong></li></ul><p><strong>原子性 : 不可分割</strong><br><strong>线程A在执行任务的时候，不能被打扰的，也不能被分割。要么同时成功，要么同时失败</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>防止指令重排</strong></li></ul><p><strong>volatile关键字通过内存屏障来防止指令被重排序。</strong></p><p><strong>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。然而，对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能，为此，Java内存模型采取保守策略。</strong></p><p><strong>下面是基于保守策略的JMM内存屏障插入策略：</strong></p><ul><li><strong>在每个volatile写操作的前面插入一个StoreStore屏障。</strong></li><li><strong>在每个volatile写操作的后面插入一个StoreLoad屏障。</strong></li><li><strong>在每个volatile读操作的后面插入一个LoadLoad屏障。</strong></li><li><strong>在每个volatile读操作的后面插入一个LoadStore屏障。</strong></li></ul><p><strong>volatile的两条语义保证了线程间共享变量的及时可见性，但整个过程并没有保证同步，这是与volatile的使命有关的，创造它的背景就是在某些情况下可以代替synchronized实现可见性的目的，规避synchronized带来的线程挂起、调度的开销。如果volatile也能保证同步，那么它就是个锁，可以完全取代synchronized了。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><strong>Java中实现多线程共享变量的可见性方法有synchronize 和 volatile 。</strong></p></li><li><p><strong>synchronize:可以用在方法或者代码块上,能保证可见性,也能保证原子性。</strong></p></li><li><p><strong>volatitle:用在变量上,只保证可见性,不保证原子性,不加锁,比synchronize轻量级,不会造成线程阻塞.volatitle读相当于加锁,volatitle写相当于解锁。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
            <tag> Synchronize </tag>
            
            <tag> Volatiie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习（二）：Redis的常用key命令</title>
      <link href="/2020/02/27/redis/redis-de-chang-yong-key-ming-ling/"/>
      <url>/2020/02/27/redis/redis-de-chang-yong-key-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis的常用key命令"><a href="#Redis的常用key命令" class="headerlink" title="Redis的常用key命令"></a>Redis的常用key命令</h1><ul><li><strong>常用的key命令:</strong></li></ul><p><strong>DEL key</strong></p><blockquote><p>该命令用于在 key 存在时删除 key。 成功返回1，失败返回0</p></blockquote><p><strong>EXISTS  key</strong></p><blockquote><p>判断key是否存在  存在返回1，不存在返回0</p></blockquote><p><strong>EXPIRE key seconds</strong></p><blockquote><p>给key设置生存时间 单位：秒</p></blockquote><p><strong>TTL key</strong></p><blockquote><p>返回key 剩余的生存时间  </p></blockquote><p><strong>MOVE key db</strong></p><blockquote><p>将当前数据库的 key 移动到给定的数据库 db 当中。 </p></blockquote><p>TYPE key</p><blockquote><p>返回key的数据类型</p></blockquote><p><strong>RENAME key newkey</strong></p><blockquote><p>将key重命名为newkey</p></blockquote><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><p>String 类型 Java String</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型和Volatile</title>
      <link href="/2020/02/26/java/jmm-nei-cun-mo-xing/"/>
      <url>/2020/02/26/java/jmm-nei-cun-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM内存模型和Volatile"><a href="#JVM内存模型和Volatile" class="headerlink" title="JVM内存模型和Volatile"></a>JVM内存模型和Volatile</h1><h2 id="1-JMM"><a href="#1-JMM" class="headerlink" title="1. JMM"></a>1. JMM</h2><blockquote><p>什么是JMM</p></blockquote><p>JMM ： Java内存模型，不存在的东西，概念！约定！  </p><p><strong>关于JMM的一些同步的约定：</strong></p><ul><li>1、线程解锁前，必须把共享变量立刻刷回主存。</li><li>2、线程加锁前，必须读取主存中的新值到工作内存中！</li><li>3、加锁和解锁是同一把锁  </li></ul><p>线程  工作内存  、主内存</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-Volatile"><a href="#2-Volatile" class="headerlink" title="2. Volatile"></a>2. Volatile</h2><h2 id="3-指令重排"><a href="#3-指令重排" class="headerlink" title="3. 指令重排"></a>3. 指令重排</h2><p>什么是指令重排： 计算机并不是按照我们写的程序顺序去执行的</p><p>源代码-&gt; 编译器优化的重排-&gt;指令并行也会重排-&gt;内存系统也会重排-&gt;执行</p><p>处理器在进行指令重排的时候，考虑：数据之间的依赖性</p><p>int x = 1; // 1<br>int y = 2; // 2<br>x = x + 5; // 3<br>y = x * x; // 4<br>我们所期望的：1234  但是可能执行的时候回变成 2134  1324 可不可能是  4123</p><h2 id="4-深入理解CAS"><a href="#4-深入理解CAS" class="headerlink" title="4.深入理解CAS"></a>4.深入理解CAS</h2><blockquote><p>什么是CAS</p></blockquote><h2 id="5-各种锁"><a href="#5-各种锁" class="headerlink" title="5.各种锁"></a>5.各种锁</h2><ul><li><p><strong>公平锁： 非常公平， 不能够插队，必须先来后到！</strong></p></li><li><p><strong>非公平锁：非常不公平，可以插队 （默认都是非公平）</strong></p></li></ul><pre class="line-numbers language-javajava"><code class="language-javajava">//默认非公平锁public ReentrantLock() {    sync = new NonfairSync();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><strong>可重入锁</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23种设计模式</title>
      <link href="/2020/02/25/she-ji-mo-shi/23-chong-she-ji-mo-shi-1/"/>
      <url>/2020/02/25/she-ji-mo-shi/23-chong-she-ji-mo-shi-1/</url>
      
        <content type="html"><![CDATA[<h1 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h1><h2 id="软件设计模式的概念："><a href="#软件设计模式的概念：" class="headerlink" title="软件设计模式的概念："></a>软件设计模式的概念：</h2><blockquote><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p></blockquote><p><strong>在软件设计模式之中，最出名的莫过于GoF(Gang of Four)</strong></p><p><strong>GoF在《设计模式：可复用面向对象软件的基础》一书种收录了23种设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。</strong></p><h3 id="设计模式的六大原则："><a href="#设计模式的六大原则：" class="headerlink" title="设计模式的六大原则："></a>设计模式的六大原则：</h3><blockquote><p> <strong>总原则：扩展开放，对修改关闭</strong></p><p>在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。</p><p>1、单一职责原则</p><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p><p>2、里氏替换原则</p><p> 里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><p> 3、依赖倒转原则</p><p>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><p>4、接口隔离原则</p><p> 这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p><p> 5、迪米特法则（最少知道原则）</p><p>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p><p> 6、合成复用原则</p><p>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</p></blockquote><h3 id="从概念上简单介绍这23种设计模式"><a href="#从概念上简单介绍这23种设计模式" class="headerlink" title="从概念上简单介绍这23种设计模式"></a>从概念上简单介绍这23种设计模式</h3><blockquote><ul><li><p><strong>单例模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</strong></p></li><li><p><strong>原型模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</strong></p></li><li><p><strong>工厂方法模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</strong></p></li><li><p><strong>抽象工厂模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</strong></p></li><li><p><strong>建造者模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</strong></p></li><li><p><strong>代理模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</strong></p></li><li><p><strong>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</strong></p></li><li><p><strong>桥接模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</strong></p></li><li><p><strong>装饰模式：动态的给对象增加一些职责，即增加其额外的功能。</strong></p></li><li><p><strong>外观模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</strong></p></li><li><p><strong>享元模式：运用共享技术来有效地支持大量细粒度对象的复用。</strong></p></li><li><p><strong>组合模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</strong></p></li><li><p><strong>模板方法模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</strong></p></li><li><p><strong>策略模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</strong></p></li><li><p><strong>命令模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</strong></p></li><li><p><strong>职责链模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</strong></p></li><li><p><strong>状态模式：允许一个对象在其内部状态发生改变时改变其行为能力。</strong></p></li><li><p><strong>观察者模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</strong></p></li><li><p><strong>中介者模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</strong></p></li><li><p><strong>迭代器模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</strong></p></li><li><p><strong>访问者模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</strong></p></li><li><p><strong>备忘录模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</strong></p></li><li><p><strong>解释器模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</strong></p></li></ul></blockquote><h3 id="根据其用途划分我们将其分为三大类"><a href="#根据其用途划分我们将其分为三大类" class="headerlink" title="根据其用途划分我们将其分为三大类"></a>根据其用途划分我们将其分为三大类</h3><ul><li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li><li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li><li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p><strong>创建型模式的特点</strong></p><blockquote><p><strong>创建型模式的作用就是创建对象，说到创建一个对象，最熟悉的就是 new 一个对象，然后 set 相关属性。但是，在很多场景下，我们需要给客户端提供更加友好的创建对象的方式，尤其是那种我们定义了类，但是需要提供给其他开发者用的时候。</strong></p><p><strong>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产。</strong></p></blockquote><hr><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法模式的定义：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。</p><p>核心本质</p><ul><li><strong>实例化对象不适用new，用工厂方法代替</strong></li><li><strong>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦。</strong></li></ul><p>工厂方法模式的主要优点有：</p><ul><li><strong>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</strong></li><li><strong>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</strong></li></ul><p>其缺点是：<strong>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</strong></p><p>下面举例：</p><ul><li><strong>传统方法</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//car接口</span><span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//宝马实体类继承Car</span><span class="token keyword">class</span> <span class="token class-name">BMW</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//奔驰实体类继承Car</span><span class="token keyword">class</span> <span class="token class-name">MB</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorMode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bmw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        bmw<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我们平常创建对象的方法，创建一个Car接口， 创建各种各样品牌的车（类）去继承这个Car接口，然后调用  Car xx = new xx(); 这样去得到一个xx品牌的车。</p><ul><li>工厂方法**</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生成car的工厂</span><span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span> String car <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorMode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bmw <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        bmw<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/OghYlX4GKxsn329.png" alt="关系依赖图"></p><p>可以看到，我们想要得到不同品牌的汽车实现类的时候，不用去new一个对象，直接传递参数给CarFactory就可以得到我们想要的汽车。</p><p>简单地说，简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。</p><blockquote><p><strong>我们强调职责单一原则，一个类只提供一种功能，CarFactory 的功能就是只要负责生产各种 Car。</strong></p></blockquote><p>那假如呢，我们想要得到摩拜单车，那该怎么做呢？</p><p>只能去创建一个摩拜单车实体类，然后修改CarFactory里面的方法，添加创建摩拜单车的方法。</p><p>这样做的缺陷在于：我们想要去添加新的品牌汽车的时候，要去修改CarFactory，不满足我们的 <strong>对修改关闭，对扩展开放原则</strong>。</p><p><strong>解决方案：</strong></p><blockquote><p><strong>从上面的案例中我们可以看出，区别与传统的创建对象方法，我们在原有的基础上，建立了一个 CarFactory 去根据传入的参数创建了我们想要得到的对象，这样符合（将产品对象的实际创建工作推迟到具体子工厂类当中）这一要求。</strong></p><p><strong>那么我们可以创建某个品牌车的车工厂， 然后车工厂继承CarFactory,  CarFactory中只有一个得到车的方法。</strong></p><p><strong>这样当我们想要添加新的品牌车的时候，只需要创建对应的车工厂类，然后继承CarFactory 这样符合了我们（对修改关闭，对扩展开放） 的原则，这就是简单工厂方法模式</strong></p></blockquote><hr><h2 id="简单工厂方法模式"><a href="#简单工厂方法模式" class="headerlink" title="简单工厂方法模式"></a>简单工厂方法模式</h2><ul><li><strong>简单工厂方法</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//所有的车共有组件</span><span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//所有车的工厂</span><span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//奔驰车工厂</span><span class="token keyword">class</span> <span class="token class-name">BMWFacrot</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BMW</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//宝马车工厂</span><span class="token keyword">class</span> <span class="token class-name">MBFacrot</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//宝马车实体类</span><span class="token keyword">class</span> <span class="token class-name">BMW</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"宝马"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//奔驰车实体类</span><span class="token keyword">class</span> <span class="token class-name">MB</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"奔驰"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bwm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMWFacrot</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">MBFacrot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bwm<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>新增</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MobaiBicycle</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"摩拜单车拉拉！！"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MoBaiBicycleFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MobaiBicycle</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car bwm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BMWFacrot</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car mb <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">MBFacrot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mb<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bwm<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新添加的摩拜单车</span>        Car mobai <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">MoBaiBicycleFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobai<span class="token punctuation">.</span><span class="token function">name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>运行结果</strong></p><p>​    <strong>奔驰</strong><br>​    <strong>宝马</strong><br>​    <strong>摩拜单车拉拉！！</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/C38NjHY51iZms2K.png" alt="依赖图"></p><hr><h2 id="抽象工厂方法模式"><a href="#抽象工厂方法模式" class="headerlink" title="抽象工厂方法模式"></a>抽象工厂方法模式</h2><p><strong>定义：</strong></p><p>抽象工厂模式提供了一个创建一系列相关或相互依赖对象的接口，无需为他们指定具体的实现类</p><p><strong>优点：</strong></p><p>具体产品在应用层的代码隔离，无需关心创建的细节</p><p>将一个系列的产品统一到一起创建</p><p><strong>缺点：</strong></p><p>规定了所有可能被创建的产品集合，产品族中拓展新的产品困难</p><p>增加了系统的抽象性和理解难度</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/xoZlOYQMvIb4ePB.png" alt="关系类图"></p><p>由于代码有点多就不全部展示，只对其中的类做讲解。</p><p>IProductFactory ：所有工厂的总工厂，其中包含要生产的产品。</p><p>Iphone、Router： 手机产品、路由器产品。</p><p>XiaomiFactory：小米工厂，生产小米的产品。</p><p>HuaweiFactory： 华为工厂，生产华为的产品。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"--------小米--------"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        XiaomiFactory xiaomiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Iphone iphone <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">iphone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">sendmsg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Router router <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">router</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">openwifi</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"--------华为--------"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        HuaweiFactory huawei <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Iphone iphone1 <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">iphone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span><span class="token function">sendmsg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iphone1<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Router router1 <span class="token operator">=</span> huawei<span class="token punctuation">.</span><span class="token function">router</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        router1<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router1<span class="token punctuation">.</span><span class="token function">openwifi</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        router1<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>运行结果</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/rn6POINJW457FoU.png" alt=""></p><blockquote><p>当然，抽象工厂的问题也是显而易见的，比如我们要加个显示器，就需要修改所有的工厂，给所有的工厂都加上制造显示器的方法。这有点违反了<strong>对修改关闭，对扩展开放</strong>这个设计原则。</p></blockquote><p>关于产品等级结构和产品族</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/kj6qLSlFnVpEbsZ.png" alt=""></p><hr><h3 id="工厂方法模式在JDK中的应用"><a href="#工厂方法模式在JDK中的应用" class="headerlink" title="工厂方法模式在JDK中的应用"></a>工厂方法模式在JDK中的应用</h3><ul><li><strong>简单工厂方法</strong></li></ul><p><strong>java.util.Calendar包下的createCalendar方法</strong></p><p><strong>这里贴出的源码只截取了与简单工厂方法相关的。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//标准的静态方法</span><span class="token keyword">private</span> <span class="token keyword">static</span> Calendar <span class="token function">createCalendar</span><span class="token punctuation">(</span>TimeZone zone<span class="token punctuation">,</span>  Locale aLocale<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/*  *还有其他内容  **/</span>    <span class="token comment" spellcheck="true">//根据传入的值，创建不同的对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aLocale<span class="token punctuation">.</span><span class="token function">hasExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String caltype <span class="token operator">=</span> aLocale<span class="token punctuation">.</span><span class="token function">getUnicodeLocaleType</span><span class="token punctuation">(</span><span class="token string">"ca"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>caltype <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>caltype<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"buddhist"</span><span class="token operator">:</span>            cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BuddhistCalendar</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"japanese"</span><span class="token operator">:</span>                cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JapaneseImperialCalendar</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"gregory"</span><span class="token operator">:</span>                cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> aLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>抽象工厂方法</strong></li></ul><p>先看一张关系图</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/RYNOkEDtBngZHVj.png" alt="Collection中的依赖"></p><p>Collection接口中的Iterator<E> iterator();方法，这个方法继承自Iterable()不重要</p><p>可以把Collection看作总的抽象工厂，其中的Iterable()方法等等其他方法都可以看作是Collection的产品。</p><p>Collection工厂把这些产品交给 各自的工厂(ArrayList、HashSet),去实现各自的功能。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这是ArrayList中的iterator方法</span><span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而Itr()就是ArrayList自己实现的内部类，里面定义属于ArrayList的hasNext()、next() 。。。等等这些方法。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/c4yLfsXxE6lhka5.png" alt="Itr内部类"></p><p>用这些方法去遍历ArrayList。</p><p><strong>总的产品Iterator接口里面会定义产品所需功能的细节，然后在交给各个品牌不同的工厂来实现</strong></p><blockquote><p>　　<strong>看懂上面的之后就特别好理解抽象工厂，抽象工厂模式与工厂方法模式的最大区别就在于，工厂方法模式针对的是一个产品等级结构；（比如Iterator()方法的不同实现）而抽象工厂模式则需要面对多个产品等级结构（Collection接口下的不同方法,）。再说明白一点就是：Collection就是一个抽象工厂，它提供了一个产品类的库，所有产品都以同样接口出现，从而使客户端不依赖于具体实现。工厂方法则是抽象工厂里面的其中一个产品类，并且把这个方法的实例化放入具体的实现类中</strong> </p></blockquote><hr><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</strong></p><p><strong>优点</strong></p><ul><li>由于单例模式只能生成一个实例，减少了系统的性能开销。</li><li>单例模式可以再系统设置全局的访问点，优化共享资源的访问。</li></ul><p><strong>常见的五种单例模式的实现方式</strong></p><ul><li>饿汉式 </li><li>懒汉式</li><li>DCL懒汉式</li><li>饿汉式改进</li><li>枚举单例</li></ul><ul><li><strong>饿汉式</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singletondemo1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">Singletondemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类初始化时，立即加载这个对象 不会涉及多线程问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singletondemo1 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供获取该对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singletondemo1 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">demotest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singletondemo1 instance <span class="token operator">=</span> Singletondemo1<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singletondemo1 instance2 <span class="token operator">=</span> Singletondemo1<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"true"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>饿汉模式的问题</strong></p><blockquote><p>假设我们在单例模式中开辟了许多的空间， private byte []data1 = new byte[1024];… 很多很多</p><p>那么这些空间会随着Static方法创建并占用内存，如果我们长时间不去调用instance实例，这些空间就浪费了。</p><p>解决方案就是再添加一个方法去创建instance实例，这就是<strong>懒汉式</strong></p></blockquote><ul><li><strong>懒汉式</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singletondemo2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">Singletondemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类初始化时，不加载这个对象 会涉及多线程问题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singletondemo2 instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供了获取该对象的方法，有synchronized，效率会降低</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singletondemo2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>DCL懒汉式</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">Singletondemo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//类初始化时，立即加载这个对象 不会涉及多线程问题</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singletondemo3 instance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span>  Singletondemo3 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//线程竞争这个锁，获得锁的线程进来，去判断是否创建实例。</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singletondemo3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo3</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不是一个原子性的操作</span>           <span class="token comment" spellcheck="true">/*            1、分配内存空间              2、执行构造方法，初始化对象             3、把这个对象指向这个空间             * 123 线程走A没问题            * 132 假设一个线程B走132后，再进来一个线程，就不会判断instance ==null 直接返回了            *此时的instance 还没完成初始化            **/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双重检测锁，将锁的范围更加精细化。</strong></p><p><strong>只有在线程进来后，判断是否创建对象，如果没有就创建，有就返回。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singletondemo4</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singletondemo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singletondemo4 instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singletondemo4</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> Singletondemo4 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">demotest2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        Singletondemo4 instance <span class="token operator">=</span> Singletondemo4<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singletondemo4 instance2 <span class="token operator">=</span> Singletondemo4<span class="token punctuation">.</span><span class="token function">getInstance</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor <span class="token operator">&lt;</span>Singletondemo4<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> Singletondemo4<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span> <span class="token punctuation">(</span> null <span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span> <span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Singletondemo4 instance3 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> instance <span class="token operator">==</span> instance3 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们都知道通过反射可以创建，而且反射中的方法可以强制忽略private关键字，这样我们的单例模式还是不安全</strong></p><p><strong>通过序列化与反序列化操作也可以破坏双重校验锁的模式</strong></p><p><strong>我们点进newInstance ( )方法可以看到：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/NfT5OCywLaJvim3.png" alt=""></p><p><strong>如果反射想要创建的对象是枚举类型，就会抛出一样异常，所以我们可以通过枚举来创建单例模式来防止通过反射破坏单例，枚举创建的单例模式线程安全，创建简单，但是无法延时加载</strong></p><ul><li><strong>枚举</strong></li></ul><pre><code>public enum Singletondemo5 {    INSTANCE;    public Singletondemo5 getInstance(){        return INSTANCE;    }}class demo5{    public static void main ( String[] args ) {        Singletondemo5 instance = Singletondemo5.INSTANCE;        Singletondemo5 instance1 = Singletondemo5.INSTANCE;        System.out.println ( instance == instance1 );    }}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/25/AerbMunQ3xBRmhs.png" alt="枚举的知识"></p><h3 id="单例模式在JDK中的应用"><a href="#单例模式在JDK中的应用" class="headerlink" title="单例模式在JDK中的应用"></a>单例模式在JDK中的应用</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Runtime currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Version version<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Runtime <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/*     *一下省略部分代码     **/</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们熟知在Spring中Bean的创建也有单例模式，我们等到解读Spring 源码的时候在做分析。</p><hr><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>概念：</p><p>　　将一个复杂对象的构建与它的表示分离。使得同样构建过程可以创建不同表示</p><p>适用场景：</p><ol><li>一个对象有很多属性的情况下</li><li>想把复杂的对象创建和使用分离</li></ol><p>优点：</p><p>　　封装性好，扩展性好</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//建造者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderA</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//汉堡</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderB</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可乐</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderC</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//薯条</span>    <span class="token keyword">abstract</span>   Builder <span class="token function">builderD</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//甜点</span>    <span class="token keyword">abstract</span> Product <span class="token function">getproduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//产品类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String builda <span class="token operator">=</span> <span class="token string">"汉堡"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String buildb <span class="token operator">=</span> <span class="token string">"可乐"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String buildc <span class="token operator">=</span> <span class="token string">"薯条"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String buildd <span class="token operator">=</span> <span class="token string">"甜点"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Product{"</span> <span class="token operator">+</span>                <span class="token string">"builda='"</span> <span class="token operator">+</span> builda <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", buildb='"</span> <span class="token operator">+</span> buildb <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", buildc='"</span> <span class="token operator">+</span> buildc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", buildd='"</span> <span class="token operator">+</span> buildd <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuilda</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builda<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuilda</span> <span class="token punctuation">(</span> String builda <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builda <span class="token operator">=</span> builda<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuildb</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buildb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildb</span> <span class="token punctuation">(</span> String buildb <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildb <span class="token operator">=</span> buildb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuildc</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buildc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildc</span> <span class="token punctuation">(</span> String buildc <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildc <span class="token operator">=</span> buildc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBuildd</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buildd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBuildd</span> <span class="token punctuation">(</span> String buildd <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buildd <span class="token operator">=</span> buildd<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//工人（服务员）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>  <span class="token keyword">extends</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Worker</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Product product<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderA</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuilda</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderB</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuildb</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderC</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuildc</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Builder <span class="token function">builderD</span> <span class="token punctuation">(</span> String msg <span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setBuildd</span> <span class="token punctuation">(</span> msg <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Product <span class="token function">getproduct</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//模拟一个肯德基定套餐业务，默认情况下是：汉堡.可乐.薯条.甜点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//产品  &lt; -  自己决定细节 &lt; - 工人</span>        Product product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builderA</span> <span class="token punctuation">(</span> <span class="token string">"全家桶"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builderB</span> <span class="token punctuation">(</span> <span class="token string">"鸡翅"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builderC</span> <span class="token punctuation">(</span> <span class="token string">"雪碧"</span> <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">builderD</span> <span class="token punctuation">(</span> <span class="token string">"冰淇淋"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProduct</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> product <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建造者模式在JDK中的应用"><a href="#建造者模式在JDK中的应用" class="headerlink" title="建造者模式在JDK中的应用"></a>建造者模式在JDK中的应用</h3><pre class="line-numbers language-java"><code class="language-java">StringBuilder s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span> <span class="token punctuation">(</span> <span class="token string">"这是"</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> <span class="token string">"JDK"</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> <span class="token string">"中的"</span> <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span> <span class="token punctuation">(</span> <span class="token string">"建造者模式"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>工厂模式注重把这个产品创造出来即可，而建造者更关心创建的细节，当创建一个对象需要使用很多步骤去完成的时候，我们可以考虑建造者模式，当创建一个对象比较简单的时候，我们就可以使用工厂模式。通俗一点来理解，建造者模式更像是专门定做一个东西，terator()作为一个工厂方法，它是可以有不同的厂家，但是呢，它完成的都是遍历的功能，而建造者更像是你买一个戒指，你不仅仅要求它能戴在手上，更加希望你的名字被刻在上面这样。就是关注到产品细节的就可以用建造者模式。</strong></p></blockquote><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p><strong>原型模式，属于对象创建型模式中的一种。通过复制原型对象的方法来创建一个对象实例，且该对象与原对象有相同的数据结构和值。</strong></p><p> <strong>简单理解JVM内存中栈和堆</strong></p><p>　　<strong>栈:</strong>用来存放函数中定义的基本类型的变量和对象的引用变量。</p><p>　　<strong>堆:</strong>则是存放由new创建的对象和数组，对象内存储普通的变量和方法。对象创建后将其地址赋值给栈中的引用变量。</p><p>　　<strong>方法区:</strong>也是堆，这里面存放类代码、静态变量、静态方法和字符串常量等。</p><p>实现一个原型模式的基本步骤</p><ol><li>实现一个接口 Cloneable</li><li>重写一个方法 clone()</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Video</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date creatTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Video</span> <span class="token punctuation">(</span> String name<span class="token punctuation">,</span> Date creatTime <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>creatTime <span class="token operator">=</span> creatTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Video</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Video{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", creatTime="</span> <span class="token operator">+</span> creatTime <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span> <span class="token punctuation">(</span> String name <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getCreatTime</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> creatTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreatTime</span> <span class="token punctuation">(</span> Date creatTime <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>creatTime <span class="token operator">=</span> creatTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Video v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Video</span> <span class="token punctuation">(</span><span class="token string">"海贼王"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v1 => "</span> <span class="token operator">+</span> v1 <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v1.hashcode => "</span> <span class="token operator">+</span> v1<span class="token punctuation">.</span><span class="token function">hashCode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Video v2 <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> v1<span class="token punctuation">.</span><span class="token function">clone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v2 => "</span> <span class="token operator">+</span> v2 <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v2.hashcode => "</span> <span class="token operator">+</span> v2<span class="token punctuation">.</span><span class="token function">hashCode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/08/vcoxHEbGkihBzwJ.png" alt="结果"></p><p>我们修改一下代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Video v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Video</span> <span class="token punctuation">(</span><span class="token string">"海贼王"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>        Video v2 <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> v1<span class="token punctuation">.</span><span class="token function">clone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v1 => "</span> <span class="token operator">+</span> v1 <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v2 => "</span> <span class="token operator">+</span> v2 <span class="token punctuation">)</span><span class="token punctuation">;</span>        date<span class="token punctuation">.</span><span class="token function">setTime</span> <span class="token punctuation">(</span> <span class="token number">124123421</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"-------------------我是分界线-----------------"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v1 => "</span> <span class="token operator">+</span> v1 <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"v2 => "</span> <span class="token operator">+</span> v2 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/08/oqutBdbDW1nQ8CZ.png" alt=""></p><p>可以看到我们期望的情况是v1.data修改，结果v2.data也修改了。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/03/08/gpkGxKyLHwJTfmi.png" alt=""></p><p>实现深拷贝的方法：</p><p>1.修改clone方法</p><p>2.序列化与反序列化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">clone</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>    Object object <span class="token operator">=</span>  <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Video v <span class="token operator">=</span> <span class="token punctuation">(</span>Video<span class="token punctuation">)</span> object<span class="token punctuation">;</span>    v<span class="token punctuation">.</span>creatTime <span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>creatTime<span class="token punctuation">.</span><span class="token function">clone</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型模式在JDK中的应用"><a href="#原型模式在JDK中的应用" class="headerlink" title="原型模式在JDK中的应用"></a>原型模式在JDK中的应用</h3><ol><li>Spring Bean创建：1.单例模式  2.原型模式</li><li>Hashtable</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token function">cloneHashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>table<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> table<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span>keySet <span class="token operator">=</span> null<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>entrySet <span class="token operator">=</span> null<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>values <span class="token operator">=</span> null<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>modCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK1.7HashMap探究&amp;手写HashMap</title>
      <link href="/2020/02/23/java/jdk1.7hashmap-tan-jiu-shou-xie-hashmap/"/>
      <url>/2020/02/23/java/jdk1.7hashmap-tan-jiu-shou-xie-hashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="JDK1-7HashMap探究-amp-手写HashMap"><a href="#JDK1-7HashMap探究-amp-手写HashMap" class="headerlink" title="JDK1.7HashMap探究&amp;手写HashMap"></a>JDK1.7HashMap探究&amp;手写HashMap</h1><h2 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h2><blockquote><p>什么是HashMap?</p></blockquote><p>简单来说，HashMap是用哈希表（直接一点可以说数组加单链表）的Map实现类。</p><p>在JDK 1.7中HashMap的底层数据结构： <strong>链表</strong> + <strong>数组</strong></p><blockquote><p>什么是Hash</p></blockquote><p>Hash函数是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。</p><p>这种转换是一种压缩映射，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。</p><p><strong>简单来说HashMap就是通过Hash函数把传入的key转化为hash值， 然会对这个值进行操作得到一个下标，这个下标就是这个传入的对象(key, value)在数组中的下标，这个元素就是链表的头节点（在数组当前下标只有一个元素的时候），后续再有元素加进来的时候，就把新加进来的元素作为链表的头结点，原头结点作为新头结点的下一元素。</strong></p><blockquote><p>HashMap字段</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 默认容量 16 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token comment" spellcheck="true">/** * 默认最大容量 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 默认负载因子 */</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数组 */</span><span class="token keyword">transient</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_TABLE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 记录容器中的大小 */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//负载</span><span class="token keyword">int</span> threshold<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 可设置的负载因子 */</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 记录进行的put() get()的数量 */</span><span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HashMap 的实例有两个参数影响其性能：初始容量 和加载因子。</p><p>容量是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。</p><p>加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。</p><p>当哈希表中的容量超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize操作（即扩容），从而哈希表将具有大约两倍的桶数。</p><blockquote><p>HashMap中两个重要参数的默认值：</p><ul><li>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16</li><li>static final float DEFAULT_LOAD_FACTOR = 0.75f;</li></ul></blockquote><p><strong>构造方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  调用下面这个方法 设置初始化容量和负载因子</span><span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                           loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    threshold <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="put-方法"><a href="#put-方法" class="headerlink" title="put()方法"></a>put()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.初始化容器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//可以存入一个 key==null 的值</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.算出hash值 </span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.通过hash值算出这个key，对于的数组下标 </span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.遍历这个结点的链表 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5.增加节点</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一步步介绍put方法中的步骤：</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inflateTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> toSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果数组大小不是2的整数幂，就向上取2的整数幂（15就取 16  30 取 32）</span>    <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span>toSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>int capacity = roundUpToPowerOf2(toSize);是很重要的操作，在下面会介绍</strong></p><blockquote><p>取数组下标的方法</p></blockquote><p>对于一个任意的数 N ，我们想要得到 范围：<strong>0 ~M-1</strong> 的方法（M为数组容量）：</p><p>对于任意值n : n % m 就会得到范围为 0~m-1 的数，这个值就可以作为数组的下标。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//取地下标的方法</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span>    <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在HashMap中则是通过  <strong>h &amp; (length-1)</strong>  将 key的hash值 与 数组长度-1进行与操作。</p><p> 而这个数组的长度永远都是2的整数幂，那2的整数幂-1 的二进制的最后几位都是1</p><p>比如：16-1 = 15  （15的二进制：0000 1111）</p><p>这样的操作保证<strong>h &amp; (length-1)</strong>后得到的结果在0~length-1这个范围之内。</p><p>举例：</p><p> <strong>h : xxxx 1010 （假设的一个hash值）</strong></p><p> <strong>l :  0000 1111（16- 1）</strong></p><p> <strong>r:  0000 1010   （结果，就是这个key对应的数组下标）</strong></p><p><strong>这样对于任意一个hash值，他在与(length-1)做与运算后的结果范围永远在： 0~15之间，这样得到的下标就会在容器的长度范围之内</strong></p><p><strong>相比于%得到数组下标，这样做的好处在于位运算的效率比较高。</strong></p><blockquote><p><strong>可以发现一个问题：在做与运算操作的时候，hash值的高位没有参与运算，那么不同的hash值，如果低位相同，通过运算得到的数组下标可能一样，这样散列性就很差。</strong></p></blockquote><p><strong>再看hash()方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> hashSeed<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> h <span class="token operator">&amp;&amp;</span> k <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Hashing<span class="token punctuation">.</span><span class="token function">stringHash32</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    h <span class="token operator">^=</span> k<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This function ensures that hashCodes that differ only by</span>    <span class="token comment" spellcheck="true">// constant multiples at each bit position have a bounded</span>    <span class="token comment" spellcheck="true">// number of collisions (approximately 8 at default load factor).</span>    h <span class="token operator">^=</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>hash（）方法通过对 k进行右移运算和异或运算 ，使得 hash值的低位具有高位的特性，这样算出来的hash值拥有一个良好的散列性，可以解决hash冲突，得到的数组下标就更有意义。</strong></p></blockquote><p><strong>HashMap 链表对象</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    V value<span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Creates new entry.     */</span>    <span class="token function">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> K k<span class="token punctuation">,</span> V v<span class="token punctuation">,</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>        next <span class="token operator">=</span> n<span class="token punctuation">;</span>        key <span class="token operator">=</span> k<span class="token punctuation">;</span>        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//遍历这个结点的链表，如果传入一样的key值，判断value是否相等，如果一样新值，覆盖老值，然后返回。</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建新结点</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 添加新元素前先判断数组的大小是否大于等于阀值，如果是且数组下标位置已经存在元素则对数组进行扩容，并对新的key重新根据新的数组长度计算下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//扩容 这是导致hashmap在多线程环境下产生死锁的原因。等下分析</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//table[i]==null 创建头结点, !=null 创建新节点并将其执行原头结点，然后将链表整体后移（即添加链表的方式是头部添加，不是尾部添加）。</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个新结点e 为其赋值为当前位置 talble[bucketIndex]的结点</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个新的头节点，然后next指向e 完成头部插入操作</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 统计元素+1</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>在了解了HashMap头插法创建链表之后，我们来看数组的扩容（头插法的目的是为不用遍历整个链表，提高效率。）</strong></p><ul><li><strong>正是这种提高效率的方法，导致了在多线程环境下，链表变成循环链表产生死锁的原因</strong></li></ul></blockquote><p><strong>扩容</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//扩容一个新的数组，他的长度是原数组的两倍。</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将旧数组内容，转移到新数组。</span>    <span class="token comment" spellcheck="true">//关键，在多线程环境下会产生死锁。</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新的容量限制 = 新的容量 * 负载因子</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历原数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建一个结点，记录当前结点的下一个元素。</span>            Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//计算当前结点在新数组中的位置。</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前结点的next赋值为新数组下标为i的元素</span>            e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前节点赋值给新数组</span>            newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//节点赋值为下一个元素</span>            e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里的扩容操作，我用图来说明。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/579GMWsCgwQzJlf.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/D4WGTZLlRznFX21.png" alt=""></p><blockquote><p>来分析一下产生死锁的情况。</p><p>假设AB两个线程同时进行对容器 进行扩容操作</p></blockquote><h3 id="产生死锁原因分析"><a href="#产生死锁原因分析" class="headerlink" title="产生死锁原因分析"></a>产生死锁原因分析</h3><p><strong>假设这是初始情况</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/Q8ALqr92liuV1Jb.png" alt="初始状况"></p><p><strong>A放了元素刘备之后，这时A线程突然进入等待</strong></p><p><strong>B线程进来，执行扩容操作后的结果如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/mjbH7uq6Gxc9Jfg.png" alt=""></p><p><strong>重点!  线程 A 和线程 B 扩容的数组是私有的，可元素是共有的。</strong></p><p><strong>B执行完操作，线程调度交给A线程</strong></p><p><strong>A放完黄盖和张飞后, 发现本来张飞后面的元素null 变成了刘备,这样就形成了循环链表产生死锁,程序运行到这里cpu100%爆炸。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/laUyw8FVmSvzIud.png" alt=""></p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">getForNullKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> entry <span class="token operator">=</span> <span class="token function">getEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null <span class="token operator">==</span> entry <span class="token operator">?</span> null <span class="token operator">:</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getEntry</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span><span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>get()方法就很简单了，得到hash值，然后遍历，得到value值，返回。</strong></p><p><strong>就不做分析了，偷个懒。</strong></p><h2 id="手写HashMap"><a href="#手写HashMap" class="headerlink" title="手写HashMap"></a>手写HashMap</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @authoer : zhw * @Date: 2020/2/23 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyHashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer CAPACITY <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyHashMap</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">put</span><span class="token punctuation">(</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> hash<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> node <span class="token operator">!=</span>null <span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                V oldvalue <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldvalue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addNode</span> <span class="token punctuation">(</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span>index <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addNode</span> <span class="token punctuation">(</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> index <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span> <span class="token punctuation">(</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>K key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> hash<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node node <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> node <span class="token operator">!=</span>null <span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">equals</span> <span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MyHashMap{"</span> <span class="token operator">+</span>                <span class="token string">"table="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span> <span class="token punctuation">(</span> table <span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyHashMap <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHashMap</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myHashMap<span class="token punctuation">.</span><span class="token function">put</span> <span class="token punctuation">(</span> i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> myHashMap <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"haha"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K <span class="token punctuation">,</span> V <span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> K key<span class="token punctuation">;</span>    <span class="token keyword">public</span> V value<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span> <span class="token punctuation">(</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> next <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Node{"</span> <span class="token operator">+</span>                <span class="token string">"key="</span> <span class="token operator">+</span> key <span class="token operator">+</span>                <span class="token string">", value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">", next="</span> <span class="token operator">+</span> next <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> K <span class="token function">getKey</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Node <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">getNext</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> V <span class="token function">getValue</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行结果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://i.loli.net/2020/02/24/qAoY56JNMQUeLRx.png" alt=""></p><h2 id="最后总结一波"><a href="#最后总结一波" class="headerlink" title="最后总结一波"></a>最后总结一波</h2><p>1.7版本的HashMap还是有很大的问题的，在下一个版本1.8中会大有改进。</p><p>最开始的时候，Java 就说明了 HashMap 不应该在高并发情况下使用。</p><p>一般的学习者会认为这是因为它没有做并发处理，所以理所应当地产生大量错读错写，所以不建议使用。</p><p>没错，没一毛钱问题。</p><p>可如果 HashMap 只是这样，那<strong>不叫做设计缺陷, 也不叫BUG</strong> 。</p><p>没有增加并发处理的数据结构在高并发使用时出现错读错写不能叫问题，更别说设计缺陷了。</p><p>总的来说阅读JDK1.7源码，能提高我们阅读源码的能力，可以理解java开发者们的设计思路，所以还是很有意思的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程进阶-JUC并发编程（2）</title>
      <link href="/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-2/"/>
      <url>/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-2/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程进阶-JUC并发编程（2）"><a href="#多线程进阶-JUC并发编程（2）" class="headerlink" title="多线程进阶-JUC并发编程（2）"></a>多线程进阶-JUC并发编程（2）</h1><h2 id="1-线程池技术"><a href="#1-线程池技术" class="headerlink" title="1. 线程池技术"></a>1. 线程池技术</h2><p>线程池：三大方法、7大参数、4种拒绝策略<br>程序的运行，本质：占用系统的资源！ 优化资源的使用！=&gt;池化技术<br>线程池、连接池、内存池、对象池///…..  创建、销毁。十分浪费资源<br>池化技术：事先准备好一些资源，有人要用，就来我这里拿，用完之后还给我。</p><h3 id="1-1-线程池的好处"><a href="#1-1-线程池的好处" class="headerlink" title="1.1 线程池的好处:"></a>1.1 线程池的好处:</h3><ul><li><p>1、降低资源的消耗</p></li><li><p>2、提高响应的速度 </p></li><li><p>3、方便管理。</p></li></ul><p>线程复用、可以控制最大并发数、管理线程</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/20200222171143.png" alt=""></p><p>线程池：三大方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Exectors 工具类、三大方法 * 使用了线程池之后，使用线程池来创建 * * @authoer : zhw * @Date: 2020/2/22 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//ExecutorService threadPool = Executors.newSingleThreadExecutor ( );// 单个线程</span>        <span class="token comment" spellcheck="true">//ExecutorService threadPool = Executors.newFixedThreadPool ( 5 ); //创建一个固定的线程池的大小</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可伸缩的线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用线程池,来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": ok"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Executors源码以及ThreadPoolExecutor源码</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-线程池四种拒绝策略"><a href="#1-2-线程池四种拒绝策略" class="headerlink" title="1.2 线程池四种拒绝策略"></a>1.2 线程池四种拒绝策略</h3><blockquote><ul><li>new ThreadPoolExecutor.AbortPolicy ()  满人了，还有人进来，不处理这个人，抛出异常。</li><li>new ThreadPoolExecutor.CallerRunsPolicy () 哪里来的，去哪里（交给谁执行）</li><li>new ThreadPoolExecutor.DiscardPolicy ()  队列满了 不会抛出异常 会放弃任务</li><li>new ThreadPoolExecutor.DiscardOldestPolicy () 队列满了，会尝试去和最早的竞争 也不会抛出异常 一个尝试性的过程</li></ul></blockquote><h3 id="1-3-7大参数"><a href="#1-3-7大参数" class="headerlink" title="1.3 7大参数"></a>1.3 7大参数</h3><blockquote><ul><li><p>int corePoolSize, // 核心线程池大小                          </p></li><li><p>int maximumPoolSize, // 大核心线程池大小                          </p></li><li><p>long keepAliveTime, // 超时了没有人调用就会释放                          </p></li><li><p>TimeUnit unit, // 超时单位                          </p></li><li><p>BlockingQueue<Runnable> workQueue, // 阻塞队列               </p></li><li><p>ThreadFactory threadFactory, // 线程工厂：创建线程的，一般 不用动                          </p></li><li><p>RejectedExecutionHandler handle // 拒绝策略</p></li></ul></blockquote><blockquote><p>手动创建线程池</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Exectors 工具类、三大方法 * 使用了线程池之后，使用线程池来创建 * * @authoer : zhw * @Date: 2020/2/22 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService threadPool <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token number">3</span><span class="token punctuation">,</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可伸缩的线程</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.AbortPolicy ()  满人了，还有人进来，不处理这个人，抛出异常。</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.CallerRunsPolicy () 哪里来的，去哪里（交给谁执行）</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.DiscardPolicy ()  队列满了 不会抛出异常 会放弃任务</span>        <span class="token comment" spellcheck="true">//new ThreadPoolExecutor.DiscardOldestPolicy () 队列满了，会尝试去和最早的竞争 也不会抛出异常 一个尝试性的过程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最大承载： deque + max</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//使用线程池,来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": ok"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 小结和拓展</p></blockquote><p>池的大的大小如何去设置！<br>了解：IO密集型，CPU密集型：（调优）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程进阶-JUC并发编程（1）</title>
      <link href="/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-1/"/>
      <url>/2020/02/22/duo-xian-cheng/duo-xian-cheng-jin-jie-juc-bing-fa-bian-cheng-1/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程进阶-JUC并发编程（1）"><a href="#多线程进阶-JUC并发编程（1）" class="headerlink" title="多线程进阶-JUC并发编程（1）"></a>多线程进阶-JUC并发编程（1）</h1><h2 id="1、什么是JUC"><a href="#1、什么是JUC" class="headerlink" title="1、什么是JUC"></a>1、什么是JUC</h2><p>​        在 Java 5.0 提供了 java.util.concurrent （简称JUC ）包,在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池、异步 IO 和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。</p><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/juc.png" alt=""></p><h2 id="2、线程和进程"><a href="#2、线程和进程" class="headerlink" title="2、线程和进程"></a>2、线程和进程</h2><h3 id="2-1-进程"><a href="#2-1-进程" class="headerlink" title="2.1 进程"></a>2.1 进程</h3><p>进程：一个程序，qq.exe , Music.exe  程序的集合。<br> 一个进程往往可以包含多个线程，至少包含一个！</p><p> Java默认有几个线程?</p><p> 2 个   mian、GC</p><h3 id="2-2-线程"><a href="#2-2-线程" class="headerlink" title="2.2 线程"></a>2.2 线程</h3><p>线程：开了一个进程 Typora，写字，自动保存（线程负责的） </p><p>对于Java而言：Thread、Runnable、Callable </p><p>Java 真的可以开启线程吗？ </p><p>开不了</p><blockquote><p>下面是Thread类的start()方法的源码（我们开启线程的方式new Thread().start()）</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * This method is not invoked for the main method thread or "system"     * group threads created/set up by the VM. Any new functionality added     * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state "NEW".     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Notify the group that this thread is about to be started     * so that it can be added to the group's list of threads     * and the group's unstarted count can be decremented. */</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* do nothing. If start0 threw a Throwable then              it will be passed up the call stack */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// native 为本地方法，他调用了底层的C++去开启线程</span><span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java是运行在虚拟机上的，无法操控硬件。</p><h3 id="2-3-并发与并行"><a href="#2-3-并发与并行" class="headerlink" title="2.3 并发与并行"></a>2.3 并发与并行</h3><p>并发（多线程操作同一个资源）</p><ul><li>CPU 一核 ，模拟出来多条线程（多个人一起行走）</li></ul><p>并行（多个人一起行走）</p><ul><li>CPU 多核 ，多个线程可以同时执行； 线程池</li></ul><p>并发编程的本质：充分利用CPU的资源 </p><h3 id="2-4-线程有几个状态"><a href="#2-4-线程有几个状态" class="headerlink" title="2.4 线程有几个状态"></a>2.4 线程有几个状态</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建     */</span>    NEW<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 运行     */</span>    RUNNABLE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 阻塞     */</span>    BLOCKED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 等待     */</span>    WAITING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 超时等待     */</span>    TIMED_WAITING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 终止     */</span>    TERMINATED<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-wait-sleep-的区别"><a href="#2-5-wait-sleep-的区别" class="headerlink" title="2.5 wait /sleep 的区别"></a>2.5 wait /sleep 的区别</h3><ol><li><p>来自不同的类</p><p>wait =&gt; Object</p><p>sleep =&gt; Thread </p></li></ol><ol start="2"><li><p>关于锁的释放 </p><p>wait 会释放锁，sleep 睡觉了，抱着锁睡觉，不会释放！</p></li></ol><ol start="3"><li><p>使用的范围是不同的 </p><p>wait 必须使用在同步代码块中</p><p>sleep 可以再任何地方睡 </p></li></ol><h2 id="3、-Lock锁"><a href="#3、-Lock锁" class="headerlink" title="3、 Lock锁"></a>3、 Lock锁</h2><h3 id="3-1传统的synchronized锁"><a href="#3-1传统的synchronized锁" class="headerlink" title="3.1传统的synchronized锁"></a>3.1传统的synchronized锁</h3><blockquote><p>下列代码模拟了一个买票业务</p><ul><li>Ticket ：资源类，业务中多线程去操作的资源类</li><li>main： 开启三个线程，采用了lambdom表达式的方法创建了三个线程 A B C</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 买票问题，初步展示synchronized版的多线程问题 * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicket</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>number<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span>票<span class="token punctuation">,</span>剩余：" <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是不加上synchronized执行的结果可以看出在没有锁的情况下，多个线程同时对统一资源进行操作造成的结果混乱。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/codezhw/cdn@1.1/source/medias/loading.jpg" data-original="https://raw.githubusercontent.com/CODEZHW/t/master/img/result.png" alt=""></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 买票问题，初步展示JUC版的多线程问题 (lock版本) (JUC:java.util.concurrent包) * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketdemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ticket1 ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket1</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ticket<span class="token punctuation">.</span><span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Ticket1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性 方法</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加锁</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>number<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"票,剩余："</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lock三部曲 </p><ul><li><p>1、new ReentrantLock(); </p></li><li><p>2、 lock.lock(); // 加锁 </p></li><li><p>3、finally=&gt;  lock.unlock(); // 解锁</p></li></ul><h3 id="3-2synchronized和lock锁的区别"><a href="#3-2synchronized和lock锁的区别" class="headerlink" title="3.2synchronized和lock锁的区别"></a>3.2synchronized和lock锁的区别</h3><ul><li>1、Synchronized   内置的Java关键字，  Lock 是一个Java类*</li><li>2、Synchronized  无法判断获取锁的状态，Lock  可以判断是否获取到了锁</li><li>3、Synchronized  会自动释放锁，lock 必须要手动释放锁！如果不释放锁，死锁 </li><li>4、Synchronized   线程 1（获得锁，阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下 去；</li><li>5、Synchronized    可重入锁，不可以中断的，非公平；Lock ，可重入锁，可以 判断锁，非公平（可以 自己设置）；</li><li>6、Synchronized     适合锁少量的代码同步问题，Lock  适合锁大量的同步代码！  </li></ul><blockquote><p>锁是什么，如何判断锁的是谁！</p></blockquote><h2 id="4、生产者和消费者问题"><a href="#4、生产者和消费者问题" class="headerlink" title="4、生产者和消费者问题"></a>4、生产者和消费者问题</h2><blockquote><p>生产者和消费者问题 Synchronized版</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 线程之间的通信问题：生产者和消费者问题！ 等待唤醒，通知唤醒。 * 线程交替执行， A B 同事操作一个变量 NUM = 0 * A num + 1 * B num - 1 * * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行add()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行dec()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">dec</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行add()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行dec()操作"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">dec</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"D"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//资源类 通用：等待，业务，通知</span><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，加一完毕了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">dec</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知其他线程，减一完毕了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可能存在的问题：ABCD四个线程同时存在可能会产生虚假唤醒.</p><p>解决方案： 将判断业务逻辑的if改为while.</p></blockquote><blockquote><p>juc版本的生产者消费者问题</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data2 data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data2</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行add()操作："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data2<span class="token punctuation">.</span><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span> <span class="token punctuation">(</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次执行dec()操作："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                    data2<span class="token punctuation">.</span><span class="token function">dec</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span> <span class="token punctuation">(</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//等待</span>                condition<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知其他线程，加一完毕了</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">dec</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//等待</span>                condition<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通知其他线程，减一完毕了</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-> :"</span> <span class="token operator">+</span> number <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何一个新的技术，绝对不是仅仅只是覆盖了原来的技术，优势和补充！</p><blockquote><p>Condition 精准的通知和唤醒线程 </p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> hut<span class="token punctuation">.</span>demo7<span class="token punctuation">.</span>demo2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @authoer : zhw * @Date: 2020/2/19 * @Description: java_study * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data3 data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data3</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data3<span class="token punctuation">.</span><span class="token function">printA</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"A"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data3<span class="token punctuation">.</span><span class="token function">printB</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"B"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data3<span class="token punctuation">.</span><span class="token function">printC</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"C"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Data3</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1A 2B 3C</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务 判断 执行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=> A"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务 判断 执行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=> B"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//业务 判断 执行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span> <span class="token punctuation">(</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=> C"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/02/21/sui-bi/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2020/02/21/sui-bi/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="我的第一个博客"><a href="#我的第一个博客" class="headerlink" title="我的第一个博客"></a>我的第一个博客</h2><p>​    经过两天的学习东拼西凑，我的博客总算建成了，希望在接下来的日子里，能够坚持记录学习技术的过程，记录自己的感想，对源码的理解。希望在将来回头来再看学习的经过的时候，能够对技术有更深一步的理解。</p><p>关于博客的建设，以后一边写博客一边优化吧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/20/hello-world/"/>
      <url>/2020/02/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
